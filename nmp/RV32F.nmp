/*
 *	RISC-V Instruction Set
 *
 *	This file is part of GLISS
 *	Copyright (c) 2017, IRIT UPS.
 *
 *	GLISS is free software; you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation; either version 2 of the License, or
 *	(at your option) any later version.
 *
 *	GLISS is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	You should have received a copy of the GNU General Public License
 *	along with GLISS; if not, write to the Free Software
 *	Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

// Floating Point Operations
op rv32f =
	  flw
	| fsw
	| fmuladd_s
	| fmulsub_s
	| fnegmuladd_s
	| fnegmulsub_s
	| fadd_s
	| fsub_s
	| fmul_s
	| fdiv_s
	| fsqrt_s
	| fsgnj_s 
	| fsgnjn_s 
	| fsgnjx_s 
	| fmin_s
	| fmax_s
	| fcvt_w_s
	| fcvt_wu_s
	| fcvt_s_w
	| fcvt_s_wu
	| fmv_w_x
	| fmv_x_w
	| fle_s
	| flt_s
	| feq_s
	| fclass_s


// load and store
// --------------
//    FLW
op flw(offset: int(12), base: reg_t, dest: freg_t)
	syntax = format("flw %s, %d(%s)", dest, offset, base)
	image = format("%12b %s 010 %s 0000111", offset, base, dest)
	action = {	
		let vAddr = R[base];
		if offset<11..11> == 1 then //nombre negatif => complement a deux
			offset = offset - 1;
			offset = ~offset;
			vAddr = vAddr - offset<10..0>;
		else
			vAddr = vAddr + offset;
		endif;
		F[dest] = 0xffffffff::M32F[vAddr]<31..0>;
	}

//    FSW 
// src = rs2, base = rs1
op fsw(offset: int(12), src: freg_t, base: reg_t)
	syntax = format("fsw %s, %d(%s)", src, offset, base)
	image = format("%7b %s %s 010 %5b 0100111", offset<11..5>, src, base, offset<4..0>)
	action = {
		let vAddr = R[base];
		let data : float(23,9) = F[src]<31..0>;	
		if offset<11..11> == 1 then //nombre negatif => complement a deux
			offset = offset - 1;
			offset = ~offset;
			vAddr = vAddr - offset<10..0>;
		else
			vAddr = vAddr + offset;
		endif;
		M32HF[vAddr] = data;
	}

// fused multiply add/sub
// rm : rounding mode
// RNE (000)= Round to Nearest, ties to Even
// RTZ (001)= Round towards Zero
// RDN (010)= Round Down (towards -infinite)
// RUP (011)= Round Up (towards +infinite)
// RMM (100)= Round to Nearest, ties to Max Magnitude
// (101) = Invalid, Reserved for future use
// (110) = Invalid, Reserved for future use
// (111) = selects dynamic rounding mode in frm
// ----------------------
//   FMADD.S :
op fmuladd_s(src3: freg_t, src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fmadd.s %s, %s, %s, %s", dest, src1, src2, src3)
	image = format("%s 00 %s %s %3b %s 1000011", src3, src2, src1, rm, dest)
	action = {
		let f1 : float(23,9) = F[src1]<31..0>;
		let f2 : float(23,9) = F[src2]<31..0>;	
		let f3 : float(23,9) = F[src3]<31..0>;
		"fp_clearexcept"("FP_ALLEXCEPT");
		F[dest]<31..0> = f1*f2+f3;
		if("fp_testexcept"("FP_INEXACT")) then
			CSRS[1] = 1;
		endif;	
	}

//   FMSUB.S
op fmulsub_s(src3: freg_t, src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fmsub.s %s, %s, %s, %s", dest, src1, src2, src3)
	image = format("%s 00 %s %s %3b %s 1000111", src3, src2, src1, rm, dest)
	action = {	
		let f1 : float(23,9) = F[src1]<31..0>;
		let f2 : float(23,9) = F[src2]<31..0>;	
		let f3 : float(23,9) = F[src3]<31..0>;
		"fp_clearexcept"("FP_ALLEXCEPT");
		F[dest]<31..0> = f1*f2-f3;
		if("fp_testexcept"("FP_INEXACT")) then
			CSRS[1] = 1;
		endif;
	}

//   FNMADD.S
op fnegmuladd_s(src3: freg_t, src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fnmadd.s %s, %s, %s, %s", dest, src1, src2, src3)
	image = format("%s 00 %s %s %3b %s 1001111", src3, src2, src1, rm, dest)
	action = {	
		let f1 : float(23,9) = F[src1]<31..0>;
		let f2 : float(23,9) = F[src2]<31..0>;	
		let f3 : float(23,9) = F[src3]<31..0>;
		"fp_clearexcept"("FP_ALLEXCEPT");
		F[dest]<31..0> = -f1*f2-f3;
		if("fp_testexcept"("FP_INEXACT")) then
			CSRS[1] = 1;
		endif;
	}

//   FNMSUB.S
op fnegmulsub_s(src3: freg_t, src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fnmsub.s %s, %s, %s, %s", dest, src1, src2, src3)
	image = format("%s 00 %s %s %3b %s 1001011", src3, src2, src1, rm, dest)
	action = {
		let f1 : float(23,9) = F[src1]<31..0>;
		let f2 : float(23,9) = F[src2]<31..0>;	
		let f3 : float(23,9) = F[src3]<31..0>;
		"fp_clearexcept"("FP_ALLEXCEPT");
		F[dest]<31..0> = -f1*f2+f3;
		if("fp_testexcept"("FP_INEXACT")) then
			CSRS[1] = 1;
		endif;

	}

// Single-Precision Floating-Point Computational Instructions
// ----------------------------------------------------------
//    FADD.S
op fadd_s(src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fadd.s %s, %s, %s", dest, src1, src2)
	image = format("0000000 %s %s %3b %s 1010011", src2, src1, rm, dest)
	action = {	
		let f1 : float(23,9) = F[src1]<31..0>;
		let f2 : float(23,9) = F[src2]<31..0>;	
		"fp_clearexcept"("FP_ALLEXCEPT");
		F[dest]<31..0> = f1 + f2;
		if("fp_testexcept"("FP_INEXACT")) then
			CSRS[1] = 1;
		endif;
	}

//    FSUB.S
op fsub_s(src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fsub.s %s, %s, %s", dest, src1, src2)
	image = format("0000100 %s %s %3b %s 1010011", src2, src1, rm, dest)
	action = {
		let f1 : float(23,9) = F[src1]<31..0>;
		let f2 : float(23,9) = F[src2]<31..0>;	
		"fp_clearexcept"("FP_ALLEXCEPT");
		F[dest]<31..0> = f1 - f2;
		if("fp_testexcept"("FP_INEXACT")) then
			CSRS[1] = 1;
		endif;
		if ("fp_testexcept"("FP_INVALID")) then			
			CSRS[1] = 16;
			F[dest]<31..0> = 0x7FC00000;
		endif;
	}

//   FMUL.S
op fmul_s(src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fmul.s %s, %s, %s", dest, src1, src2)
	image = format("0001000 %s %s %3b %s 1010011", src2, src1, rm, dest)
	action = {	
		let f1 : float(23,9) = F[src1]<31..0>;
		let f2 : float(23,9) = F[src2]<31..0>;	
		"fp_clearexcept"("FP_ALLEXCEPT");
		F[dest]<31..0> = f1 * f2;
		if("fp_testexcept"("FP_INEXACT")) then
			CSRS[1] = 1;
		endif;
	}

//    FDIV.S
op fdiv_s(src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fdiv.s %s, %s, %s", dest, src1, src2)
	image = format("0001100 %s %s %3b %s 1010011", src2, src1, rm, dest)
	action = {
		let f1 : float(23,9) = F[src1]<31..0>;
		let f2 : float(23,9) = F[src2]<31..0>;	
		"fp_clearexcept"("FP_ALLEXCEPT");
		F[dest]<31..0> = f1 / f2;
		if("fp_testexcept"("FP_INEXACT")) then
			CSRS[1] = 1;
		endif;
		if("fp_testexcept"("FP_DIVBYZERO")) then
			CSRS[1] = 8;
			//return nan or infinite ?
		endif;
	}

// FSQRT.S //TODO switch
op fsqrt_s(src: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fsqrt.s %s, %s", dest, src)
	image = format("0101100 00000 %s %3b %s 1010011", src, rm, dest)
	action = {
		let f1 : float(23,9) = F[src]<31..0>;
		"fp_clearexcept"("FP_ALLEXCEPT");
		F[dest]<31..0> = "fp32_sqrt"(f1);
		if("fp_testexcept"("FP_INEXACT")) then
			CSRS[1] = 1;
		endif;
		if("fp_testexcept"("FP_INVALID")) then
			CSRS[1] = 16;
			F[dest]<31..0> = 0x7FC00000;
		endif;
		
	}
	
// FMIN.S //TODO switch
op fmin_s(src2: freg_t, src1: freg_t, dest: freg_t)
	syntax = format("fmin.s %s, %s, %s", dest, src1, src2) 
	image = format("0010100 %s %s 000 %s 1010011", src2, src1, dest)
	action = {	
		let NaN = 0;

		"printf"("\tminimum entre %08X et %08X\n",F[src1]<31..0>,F[src2]<31..0>);

		//If both inputs are NaNs, the result is the canonical NaN
		if((F[src1]<30..23>==0b11111111 && F[src1]<22..0>!=0) && (F[src2]<30..23>==0b11111111 && F[src2]<22..0>!=0)) then			
			NaN = 1;			
			F[dest]<31..0> = 0x7fc00000;
			// Signaling NaN inputs set the invalid operation exception flag
			if (F[src1]<31..0>==0x7f800001 || F[src1]<31..0>==0xff800001) || (F[src2]<31..0>==0x7f800001 || F[src2]<31..0>==0xff800001) then 
				/* Invalid Operation: flag NV = 1 */
				CSRS[1] = 16;
			endif;
		endif;
		
		//If only one operand is a NaN, the result is the non-NaN operand.
		if(!NaN && (F[src1]<30..23>==0b11111111 && F[src1]<22..0>!=0) && !(F[src2]<30..23>==0b11111111 && F[src2]<22..0>!=0)) then
			NaN = 1;
			F[dest]<31..0> = F[src2]<31..0>;
			if (F[src1]<31..0>==0x7f800001 || F[src1]<31..0>==0xff800001) then 
				/* Invalid Operation: flag NV = 1 */
				CSRS[1] = 16;
			endif;
		endif;
		if(!NaN && (F[src2]<30..23>==0b11111111 && F[src2]<22..0>!=0) && !(F[src1]<30..23>==0b11111111 && F[src1]<22..0>!=0)) then
			NaN = 1;
			F[dest]<31..0> = F[src1]<31..0>;
			if (F[src2]<31..0>==0x7f800001 || F[src2]<31..0>==0xff800001) then 
				/* Invalid Operation: flag NV = 1 */
				CSRS[1] = 16;
			endif;
		endif;

		if !NaN then
			let f1 : float(23,9) = F[src1]<31..0>;
			let f2 : float(23,9) = F[src2]<31..0>;
			let condition = f1 < f2;
			if condition then
				F[dest]<31..0> = f1;
			else
				F[dest]<31..0> = f2;
			endif;
			//the value âˆ’0.0 is considered to be less than the value +0.0.
			if F[src1]<31..0> == 0x80000000 && F[src2]<31..0> == 0x00000000 then
				F[dest]<31..0> = F[src1]<31..0>;
			else
				if F[src1]<31..0> == 0x00000000 && F[src2]<31..0> == 0x80000000 then
					F[dest]<31..0> = F[src2]<31..0>;
				endif;
			endif;
		endif;
	}


// FMAX.S //TODO switch
op fmax_s(src2: freg_t, src1: freg_t, dest: freg_t)
	syntax = format("fmax.s %s, %s, %s", dest, src1, src2) 
	image = format("0010100 %s %s 001 %s 1010011", src2, src1, dest)
	action = {	
		let NaN = 0;
		
		//If both inputs are NaNs, the result is the canonical NaN
		if((F[src1]<30..23>==0b11111111 && F[src1]<22..0>!=0) && (F[src2]<30..23>==0b11111111 && F[src2]<22..0>!=0)) then	
			NaN = 1;			
			F[dest]<31..0> = 0x7fc00000;
			// Signaling NaN inputs set the invalid operation exception flag
			if (F[src1]<31..0>==0x7f800001 || F[src1]<31..0>==0xff800001) || (F[src2]<31..0>==0x7f800001 || F[src2]<31..0>==0xff800001) then 
				/* Invalid Operation: flag NV = 1 */
				CSRS[1] = 16;
			endif;
		endif;
		
		//If only one operand is a NaN, the result is the non-NaN operand.
		if(!NaN && (F[src1]<30..23>==0b11111111 && F[src1]<22..0>!=0) && !(F[src2]<30..23>==0b11111111 && F[src2]<22..0>!=0)) then
			NaN = 1;
			F[dest]<31..0> = F[src2]<31..0>;
			if (F[src1]<31..0>==0x7f800001 || F[src1]<31..0>==0xff800001) then 
				/* Invalid Operation: flag NV = 1 */
				CSRS[1] = 16;
			endif;
		endif;
		if(!NaN && (F[src2]<30..23>==0b11111111 && F[src2]<22..0>!=0) && !(F[src1]<30..23>==0b11111111 && F[src1]<22..0>!=0)) then
			NaN = 1;
			F[dest]<31..0> = F[src1]<31..0>;
			if (F[src2]<31..0>==0x7f800001 || F[src2]<31..0>==0xff800001) then 
				/* Invalid Operation: flag NV = 1 */
				CSRS[1] = 16;
			endif;
		endif;

		if !NaN then
			let f1 : float(23,9) = F[src1]<31..0>;
			let f2 : float(23,9) = F[src2]<31..0>;
			let condition = f1 > f2;
			if condition then
				F[dest]<31..0> = f1;
			else
				F[dest]<31..0> = f2;
			endif;
			//the value âˆ’0.0 is considered to be less than the value +0.0.
			if F[src1]<31..0> == 0x80000000 && F[src2]<31..0> == 0x00000000 then
				F[dest]<31..0> = F[src2]<31..0>;
			else
				if F[src1]<31..0> == 0x00000000 && F[src2]<31..0> == 0x80000000 then
					F[dest]<31..0> = F[src1]<31..0>;
				endif;
			endif;
		endif;
	}

// Single-Precision Floating-Point Conversion and Move Instructions
// -----------------------------------------------------------------
//    FSGNJ.S
op fsgnj_s(src2: freg_t, src1: freg_t, dest: freg_t)
	syntax = if src1 == src2 then 
		format("fmv.s %s, %s", dest, src1)
		else format("fsgnj.s %s, %s, %s", dest, src1, src2) endif 
	image = format("0010000 %s %s 000 %s 1010011", src2, src1, dest)
	action = {	
		F[dest]<31..0> = F[src2]<31..31>::F[src1]<30..0>;
	}

//   FSGNJN.S	
op fsgnjn_s(src2: freg_t, src1: freg_t, dest: freg_t)
	syntax = if src1 == src2 then
		format("fneg.s %s, %s", dest, src1)
		else format("fsgnjn.s %s, %s, %s", dest, src1, src2) endif  
	image = format("0010000 %s %s 001 %s 1010011", src2, src1, dest)
	action = {	
		F[dest]<31..0> = (~F[src2]<31..31>)::F[src1]<30..0>;
	}

//   FSGNJX.S
op fsgnjx_s(src2: freg_t, src1: freg_t, dest: freg_t)
	syntax = if src1 == src2 then 
		format("fabs.s %s, %s", dest, src1)
		else format("fsgnjx.s %s, %s, %s", dest, src1, src2) endif
	image = format("0010000 %s %s 010 %s 1010011", src2, src1, dest)
	action = {	
		F[dest]<31..0> = (F[src2]<31..31> ^ F[src1]<31..31>)::F[src1]<30..0>;
	}

//   FCVT.W.S //TODO switch
op fcvt_w_s(src: freg_t, rm: card(3), dest: reg_t)
	syntax = format("fcvt.w.s %s, %s", dest, src) 
	image = format("1100000 00000 %s %3b %s 1010011", src, rm, dest)
	action = {	
		let f : float(23,9) = F[src]<31..0>;
		if f != coerce(real,coerce(word,f)) then 
			/* Inexact : flag NX = 1 */ 
			CSRS[1] = 1;
		endif;
		setR(dest,coerce(word,f));

		//output for out-of-range negative input		
		if(f < coerce(real,(-2**31)) ) then
			setR(dest,0x80000000);
			CSRS[1]=16;
		endif;

		//output for -infinite
		if(F[src]<31..0>==0xff800000) then	
			setR(dest,0x80000000);
			CSRS[1]=16;
		endif;

		//output for out-of-range positive input
		if(f > coerce(real,(2**31 - 1)) ) then
			setR(dest,0x7fffffff);
			CSRS[1]=16;
		endif;

		//output for +infinite or NaN
		if(F[src]<30..23>==255 && F[src]<22..0>!=0) then	
			setR(dest,0x7fffffff);
			CSRS[1]=16;
		endif; 
	}

//   FCVT.WU.S //TODO switch
op fcvt_wu_s(src: freg_t, rm: card(3), dest: reg_t)
	syntax = format("fcvt.wu.s %s, %s", dest, src) 
	image = format("1100000 00001 %s %3b %s 1010011", src, rm, dest)
	action = {
		let f : float(23,9) = F[src]<31..0>;
		if f != coerce(real,coerce(int(64),f)) then 
			/* Inexact : flag NX = 1 */ 
			CSRS[1] = 1;
		endif;
		setR(dest,coerce(uword,f));
		
		//output for out-of-range negative input
		if(coerce(int(64),f)<63..63>==1) then
			"printf"("entree dans la premiere boucle\n");
			setR(dest,0x00000000);
			CSRS[1]=16;
		endif;	

		//output for -infinite
		if(F[src]<31..0>==0xff800000) then	
			setR(dest,0x00000000);
			CSRS[1]=16;
		endif;	

		//output for out-of-range positive input
		if(coerce(card(64),f) > coerce(card(64),0xffffffff) ) then
			"printf"("entree dans la deuxieme boucle\n");
			setR(dest,0xffffffff);
			CSRS[1]=16;
		endif;

		//output for +infinite or NaN
		if (F[src]<31..31>==0 && F[src]<30..23>==255) || (F[src]<30..23>==255 && F[src]<22..0>!=0)  then
			setR(dest,0xffffffff);
			CSRS[1]=16;
		endif; 
	}

//   FCVT.S.W
op fcvt_s_w(src: reg_t, rm: card(3), dest: freg_t)
	syntax =  format("fcvt.s.w %s, %s", dest, src) 
	image = format("1101000 00000 %s %3b %s 1010011", src, rm, dest)
	action = {	
		F[dest]<31..0> = coerce(float(23,9),R[src]);
	}
	
//   FCVT.S.WU
op fcvt_s_wu(src: reg_t, rm: card(3), dest: freg_t)
	syntax =  format("fcvt.s.wu %s, %s", dest, src) 
	image = format("1101000 00001 %s %3b %s 1010011", src, rm, dest)
	action = {	
		F[dest]<31..0> = coerce(float(23,9),coerce(uword,R[src]));
	}

//   FMV.W.X
op fmv_w_x(src: reg_t, dest: freg_t)
	syntax = format("fmv.w.x %s, %s", dest, src)
	image = format("1111000 00000 %s 000 %s 1010011", src, dest)
	action = {	
		setF(dest,R[src]);
	}
	
//   FMV.X.W
op fmv_x_w(src: freg_t, dest: reg_t)
	syntax = format("fmv.x.w %s, %s", dest, src)
	image = format("1110000 00000 %s 000 %s 1010011", src, dest)
	action = {
		setR(dest,F[src]<31..0>);
	}


// Single-Precision Floating-Point Compare Instructions
// ----------------------------------------------------
//   FLE.S
op fle_s(src2: freg_t, src1: freg_t, dest: reg_t)
	syntax = format("fle.s %s, %s, %s", dest, src1, src2) 
	image = format("1010000 %s %s 000 %s 1010011", src2, src1, dest)
	action = {	

		//An invalid operation exception is raised if either input is NaN
		if(F[src1]<30..23>==0b11111111 && F[src1]<22..0>!=0) || (F[src2]<30..23>==0b11111111 && F[src2]<22..0>!=0) then
			setR(dest,0);
			/* Invalid Operation : flag NV = 1 */ 
			CSRS[1] = 16;
		else
			let f1 : float(23,9) = F[src1]<31..0>;
			let f2 : float(23,9) = F[src2]<31..0>;
			let condition = f1 <= f2;
			if condition then
				setR(dest,1);
			else 
				setR(dest,0);
			endif;  
		endif;
	}

//   FLT.S
op flt_s(src2: freg_t, src1: freg_t, dest: reg_t)
	syntax = format("flt.s %s, %s, %s", dest, src1, src2) 
	image = format("1010000 %s %s 001 %s 1010011", src2, src1, dest)
	action = {	

		//An invalid operation exception is raised if either input is NaN
		if(F[src1]<30..23>==0b11111111 && F[src1]<22..0>!=0) || (F[src2]<30..23>==0b11111111 && F[src2]<22..0>!=0) then
			setR(dest,0);
			/* Invalid Operation : flag NV = 1 */ 
			CSRS[1] = 16;
		else
			let f1 : float(23,9) = F[src1]<31..0>;
			let f2 : float(23,9) = F[src2]<31..0>;
			let condition = f1 < f2;
			if condition then
				setR(dest,1);
			else 
				setR(dest,0);
			endif;  
		endif;
	}
	
//   FEQ.S
op feq_s(src2: freg_t, src1: freg_t, dest: reg_t)
	syntax = format("feq.s %s, %s, %s", dest, src1, src2) 
	image = format("1010000 %s %s 010 %s 1010011", src2, src1, dest)
	action = {	

		//Only signaling NaN inputs cause an invalid operation exception
		if(F[src1]<31..0>==0x7f800001 || F[src1]<31..0>==0xff800001) || (F[src2]<31..0>==0x7f800001 || F[src2]<31..0>==0xff800001) then		
			setR(dest,0);
			/* Invalid Operation : flag NV = 1 */ 
			CSRS[1] = 16;
		else 
			let f1 : float(23,9) = F[src1]<31..0>;
			let f2 : float(23,9) = F[src2]<31..0>;
			let condition = f1 == f2;
			if condition then
				setR(dest,1);
			else 
				setR(dest,0);
			endif;  
		endif;
	}

// classification instructions
//	bit sign	    exponent	          mantissa
// (F[src]<31..31>   &&   F[src]<30..23>   &&   F[src]<22..0>)
op fclass_s(src: freg_t, dest: reg_t)
	syntax = format("fclass.s %s, %s", dest, src)
	image = format("1110000 00000 %s 001 %s 1010011", src, dest)
	action = {	
		setR(dest,0);
		let done = 0;
		if(F[src]<31..0> == 0xff800000) then
			setR(dest,1); done=1; endif;//NegInfinity, bit 0
		if(!done && F[src]<31..31> == 1 && F[src]<30..23> != 0 && F[src]<30..23> < 255) then
			setR(dest,1<<1); done=1; endif; //NegNormal, bit 1
		if(!done && F[src]<31..31> == 1 && F[src]<30..23> == 0 && F[src]<22..0> != 0) then
			setR(dest,1<<2); done=1; endif; //NegSubnormal, bit 2 
		if(!done && F[src]<31..31> == 1 && F[src]<30..23> == 0 && F[src]<22..0> == 0) then
			setR(dest,1<<3); done=1; endif; //NegZero, bit 3
		if(!done && F[src]<31..31> == 0 && F[src]<30..23> == 0 && F[src]<22..0> == 0) then
			setR(dest,1<<4); done=1; endif; //PosZero, bit 4
		if(!done && F[src]<31..31> == 0 && F[src]<30..23> == 0 && F[src]<22..0> != 0) then
			setR(dest,1<<5); done=1; endif; //PosSubnormal, bit 5
		if(!done && F[src]<31..31> == 0 && F[src]<30..23> != 0 && F[src]<30..23> < 255) then
			setR(dest,1<<6); done=1; endif; //PosNormal, bit 6
		if(!done && F[src]<31..0> == 0x7f800000) then
			setR(dest,1<<7); done=1; endif; //PosInfinity, bit 7
		if(!done && F[src]<30..23> == 255 && F[src]<22..1> == 0 && F[src]<0..0> == 1) then 
			setR(dest,1<<8); done=1; endif; //SignalingNan, bit 8
		if(!done && F[src]<30..23> == 255 && F[src]<22..22> == 1) then
			setR(dest,1<<9); done=1; endif;//QuietNan, bit 9
	}

