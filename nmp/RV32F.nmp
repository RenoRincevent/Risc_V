/*
 *	RISC-V Instruction Set
 *
 *	This file is part of GLISS
 *	Copyright (c) 2017, IRIT UPS.
 *
 *	GLISS is free software; you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation; either version 2 of the License, or
 *	(at your option) any later version.
 *
 *	GLISS is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	You should have received a copy of the GNU General Public License
 *	along with GLISS; if not, write to the Free Software
 *	Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

// Floating Point Operations
op rv32f =
	  flw
	| fsw
	| fmuladd_s
	| fmulsub_s
	| fnegmuladd_s
	| fnegmulsub_s
	| fadd_s
	| fsub_s
	| fmul_s
	| fdiv_s
	| fsqrt_s
	| fsgnj_s 
	| fsgnjn_s 
	| fsgnjx_s 
	| fmin_s
	| fmax_s
	| fcvt_w_s
	| fcvt_wu_s
	| fcvt_s_w
	| fcvt_s_wu
	| fmv_w_x
	| fmv_x_w
	| fle_s
	| flt_s
	| feq_s
	| fclass_s


// load and store
// --------------
//    FLW
op flw(offset: int(12), base: reg_t, dest: freg_t)
	syntax = format("flw %s, %d(%s)", dest, offset, base)
	image = format("%12b %s 010 %s 0000111", offset, base, dest)
	action = {	
		let vAddr = offset + R[base];
		let memword = M32F[vAddr];
		setF(dest, memword) ;
	}

//    FSW 
// src = rs2, base = rs1
op fsw(offset: int(12), src: freg_t, base: reg_t)
	syntax = format("fsw %s, %d(%s)", src, offset, base)
	image = format("%7b %s %s 010 %5b 0100111", offset<11..5>, src, base, offset<4..0>)
	action = {	
		let vAddr = offset + R[base];
		AddressTranslation(pAddr, uncached, vAddr, DATA, STORE);
		let dataword = F[src];
		StoreMemoryWORDF(uncached, dataword, pAddr, vAddr);
	}

// fused multiply add/sub
// rm : rounding mode
// RNE (000)= Round to Nearest, ties to Even
// RTZ (001)= Round towards Zero
// RDN (010)= Round Down (towards -infinite)
// RUP (011)= Round Up (towards +infinite)
// RMM (100)= Round to Nearest, ties to Max Magnitude
// (101) = Invalid, Reserved for future use
// (110) = Invalid, Reserved for future use
// (111) = TODO selects dynamic rounding mode ? in frm -> fcsr<7..5> (fcsr : floating-point control and status register)
// ----------------------
//   FMADD.S :
op fmuladd_s(src3: freg_t, src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fmadd.s %s, %s, %s, %s", dest, src1, src2, src3)
	image = format("%s 00 %s %s %3b %s 1000011", src3, src2, src1, rm, dest)
	action = {
		let r1 = F[src1]; //reg F[32, float(23,9)]
		let r2 = F[src2];
		let r3 = F[src3];
		let roundingMod = rm;

		//raise the invalid operation exception when the multiplicands are infinite and zero
		if(r1<30..23> == 255 && r1<22..0> == 0 && r2 == 0) || (r2<30..23> == 255 && r2<22..0> == 0 && r1 == 0) then
			FCSR<4..4> = 1;
			SignalException(InvalidOperation);			
		else
			let result = r1*r2+r3;
			if roundingMod == 7 then
				roundingMod = FCSR<7..5>;
			endif;
			let resultRound = rounding(result,roundingMod); //TODO fction d'arrondi, arrondi a la dizaine, l'unité,le dixième ? 
			setF(dest,resultRound); 
		endif;
		
	}

//   FMSUB.S
op fmulsub_s(src3: freg_t, src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fmsub.s %s, %s, %s, %s", dest, src1, src2, src3)
	image = format("%s 00 %s %s %3b %s 1000111", src3, src2, src1, rm, dest)
	action = {	
		let r1 = F[src1];
		let r2 = F[src2];
		let r3 = F[src3];
		let roundingMod = rm;

		if(r1<30..23> == 255 && r1<22..0> == 0 && r2 == 0) || (r2<30..23> == 255 && r2<22..0> == 0 && r1 == 0) then
			FCSR<4..4> = 1;			
			SignalException(InvalidOperation);
		else
			let result = r1*r2-r3;
			if roundingMod == 7 then
				roundingMod = FCSR<7..5>;
			endif;
			let resultRound = rounding(result,roundingMod); 
			setF(dest,resultRound);
		endif;
	}

//   FNMADD.S
op fnegmuladd_s(src3: freg_t, src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fnmadd.s %s, %s, %s, %s", dest, src1, src2, src3)
	image = format("%s 00 %s %s %3b %s 1001111", src3, src2, src1, rm, dest)
	action = {	
		let r1 = F[src1];
		let r2 = F[src2];
		let r3 = F[src3];
		let roundingMod = rm;

		if(r1<30..23> == 255 && r1<22..0> == 0 && r2 == 0) || (r2<30..23> == 255 && r2<22..0> == 0 && r1 == 0) then
			FCSR<4..4> = 1;	
			SignalException(InvalidOperation);
		else
			let result = -r1*r2-r3;
			if roundingMod == 7 then
				roundingMod = FCSR<7..5>;
			endif;
			let resultRound = rounding(result,roundingMod); 
			setF(dest,resultRound);
		endif;
	}

//   FNMSUB.S
op fnegmulsub_s(src3: freg_t, src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fnmsub.s %s, %s, %s, %s", dest, src1, src2, src3)
	image = format("%s 00 %s %s %3b %s 1001011", src3, src2, src1, rm, dest)
	action = {
		let r1 = F[src1];
		let r2 = F[src2];
		let r3 = F[src3];
		let roundingMod = rm;
		
		if(r1<30..23> == 255 && r1<22..0> == 0 && r2 == 0) || (r2<30..23> == 255 && r2<22..0> == 0 && r1 == 0) then
			FCSR<4..4> = 1;
			SignalException(InvalidOperation);
		else
			let result = -r1*r2+r3;
			if roundingMod == 7 then
				roundingMod = FCSR<7..5>;
			endif;
			let resultRound = rounding(result,roundingMod); 
			setF(dest,resultRound);
		endif;	
	}

// Single-Precision Floating-Point Computational Instructions
// ----------------------------------------------------------
//    FADD.S
op fadd_s(src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fadd.s %s, %s, %s", dest, src1, src2)
	image = format("0000000 %s %s %3b %s 1010011", src2, src1, rm, dest)
	action = {	
		let r1 = F[src1];
		let r2 = F[src2];
		let roundingMod = rm;

		let result = r1+r2;
		if roundingMod == 7 then
			roundingMod = FCSR<7..5>;
		endif;
		let resultRound = rounding(result,roundingMod); 
		setF(dest,resultRound);
	}

//    FSUB.S
op fsub_s(src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fsub.s %s, %s, %s", dest, src1, src2)
	image = format("0000100 %s %s %3b %s 1010011", src2, src1, rm, dest)
	action = {
		let r1 = F[src1];
		let r2 = F[src2];
		let roundingMod = rm;

		let result = r1-r2;
		if roundingMod == 7 then
			roundingMod = FCSR<7..5>;
		endif;
		let resultRound = rounding(result,roundingMod); 
		setF(dest,resultRound);
	}

//   FMUL.S
op fmul_s(src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fmul.s %s, %s, %s", dest, src1, src2)
	image = format("0001000 %s %s %3b %s 1010011", src2, src1, rm, dest)
	action = {	
		let r1 = F[src1];
		let r2 = F[src2];
		let roundingMod = rm;

		let result = r1*r2;
		if roundingMod == 7 then
			roundingMod = FCSR<7..5>;
		endif;
		let resultRound = rounding(result,roundingMod); 
		setF(dest,resultRound);
	}

//    FDIV.S
op fdiv_s(src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fdiv.s %s, %s, %s", dest, src1, src2)
	image = format("0001100 %s %s %3b %s 1010011", src2, src1, rm, dest)
	action = {	
		let r1 = F[src1];
		let r2 = F[src2];
		if r2 == 0 then FCSR<3..3> = 1; endif;
		let roundingMod = rm;

		let result = r1/r2;
		if roundingMod == 7 then
			roundingMod = FCSR<7..5>;
		endif;
		let resultRound = rounding(result,roundingMod); 
		setF(dest,resultRound);
	}

// FSQRT.S
op fsqrt_s(src: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fsqrt.s %s, %s", dest, src)
	image = format("0101100 00000 %s %3b %s 1010011", src, rm, dest)
	action = {
		//If F[src] is NaN, a NaN shall be returned.
		let sNan = coerce(float(23,9),0b01111111100000000000000000000001);
		let qNan = coerce(float(23,9),0b01111111110000000000000000000001);
		if(F[src]<30..0>==sNan<30..0> || F[src]<30..0>==qNan<30..0>) then
			setF(dest,F[src]);
		endif;

		//If F[src] is ±0 or +Inf, F[src] shall be returned.
		if(F[src]<30..0> == 0 || (F[src]<31..31> == 0 && F[src]<30..23> == 255 && F[src]<22..0> == 0)) then
			setF(dest,F[src]);
		endif;

		//If F[src] is -Inf or < 0, a domain error shall occur, and a NaN shall be returned
		if(F[src]<31..31> == 1 && F[src]<30..23> != 0) then
			//
		endif;

		//If F[src] > PosNormal, compute sqrt	
		// empty, no simulation
	}
	
// FMIN.S
op fmin_s(src2: freg_t, src1: freg_t, dest: freg_t)
	syntax = format("fmin.s %s, %s, %s", dest, src1, src2) 
	image = format("0010100 %s %s 000 %s 1010011", src2, src1, dest)
	action = {	
		let NaN = 1;
		let sNan = coerce(float(23,9),0b01111111100000000000000000000001);
		let qNan = coerce(float(23,9),0b01111111110000000000000000000001);
		let nanCanonical = coerce(float(23,9),0b01111111110000000000000000000000);
		
		//if at least one input is a signaling NaN, or if both inputs are quiet NaNs, the result is the canonical NaN
		if((F[src1]<30..0> == sNan<30..0> || F[src2]<30..0> == sNan<30..0>) || (F[src1]<30..0> == qNan<30..0> && F[src2]<30..0> == qNan<30..0>)) then
			NaN = 0;			
			setF(dest,nanCanonical);
		endif;
		
		//If one operand is a quiet NaN and the other is not a NaN, the result is the non-NaN operand.
		if(!NaN && F[src1]<30..0> == qNan<30..0> && !(F[src2]<30..0> == qNan<30..0> || F[src2]<30..0> == sNan<30..0>)) then
			NaN = 0;
			setF(dest,F[src2]);
		endif;
		if(!NaN && F[src2]<30..0> == qNan<30..0> && !(F[src1]<30..0> == qNan<30..0> || F[src1]<30..0> == sNan<30..0>)) then
			NaN = 0;
			setF(dest,F[src1]);
		endif;

		if !NaN then
			let condition = F[src1] < F[src2]; //TODO comment cela ce passe si les deux sont égaux ? une valeur a prendre en priorité ?
			if condition then
				setF(dest,F[src1]);
			else 
				setF(dest,F[src2]);
			endif;
		endif;
	}


// FMAX.S
op fmax_s(src2: freg_t, src1: freg_t, dest: freg_t)
	syntax = format("fmax.s %s, %s, %s", dest, src1, src2) 
	image = format("0010100 %s %s 001 %s 1010011", src2, src1, dest)
	action = {	
		let NaN = 1;
		let sNan = coerce(float(23,9),0b01111111100000000000000000000001);
		let qNan = coerce(float(23,9),0b01111111110000000000000000000001);
		let nanCanonical = coerce(float(23,9),0b01111111110000000000000000000000);
		
		//if at least one input is a signaling NaN, or if both inputs are quiet NaNs, the result is the canonical NaN
		if((F[src1]<30..0> == sNan<30..0> || F[src2]<30..0> == sNan<30..0>) || (F[src1]<30..0> == qNan<30..0> && F[src2]<30..0> == qNan<30..0>)) then
			NaN = 0;			
			setF(dest,nanCanonical);
		endif;
		
		//If one operand is a quiet NaN and the other is not a NaN, the result is the non-NaN operand.
		if(!NaN && F[src1]<30..0> == qNan<30..0> && !(F[src2]<30..0> == qNan<30..0> || F[src2]<30..0> == sNan<30..0>)) then
			NaN = 0;
			setF(dest,F[src2]);
		endif;
		if(!NaN && F[src2]<30..0> == qNan<30..0> && !(F[src1]<30..0> == qNan<30..0> || F[src1]<30..0> == sNan<30..0>)) then
			NaN = 0;
			setF(dest,F[src1]);
		endif;

		if !NaN then
			let condition = F[src1] > F[src2];
			if condition then
				setF(dest,F[src1]);
			else
				setF(dest,F[src2]);
			endif;
		endif;
	}

// Single-Precision Floating-Point Conversion and Move Instructions
// -----------------------------------------------------------------
//    FSGNJ.S
op fsgnj_s(src2: freg_t, src1: freg_t, dest: freg_t)
	syntax = if src1 == src2 then 
		format("fmv.s %s, %s", dest, src1)	// Ajout des pseudo instruction
		else format("fsgnj.s %s, %s, %s", dest, src1, src2) endif 
	image = format("0010000 %s %s 000 %s 1010011", src2, src1, dest)
	action = {	
		setF(dest,coerce(float(23,9),F[src2]<31..31>::F[src1]<30..0>));
	}

//   FSGNJN.S	
op fsgnjn_s(src2: freg_t, src1: freg_t, dest: freg_t)
	syntax = if src1 == src2 then
		format("fneg.s %s, %s", dest, src1)
		else format("fsgnjn.s %s, %s, %s", dest, src1, src2) endif  
	image = format("0010000 %s %s 001 %s 1010011", src2, src1, dest)
	action = {	
		setF(dest,coerce(float(23,9),(-F[src2]<31..31>)::F[src1]<30..0>));
	}

//   FSGNJX.S
op fsgnjx_s(src2: freg_t, src1: freg_t, dest: freg_t)
	syntax = if src1 == src2 then 
		format("fabs.s %s, %s", dest, src1)
		else format("fsgnjx.s %s, %s, %s", dest, src1, src2) endif
	image = format("0010000 %s %s 010 %s 1010011", src2, src1, dest)
	action = {	
		setF(dest,coerce(float(23,9),(F[src2]<31..31> ^ F[src1]<31..31>)::F[src1]<30..0>));
	}

//   FCVT.W.S
op fcvt_w_s(src: freg_t, rm: card(3), dest: reg_t)
	syntax = format("fcvt.w.s %s, %s", dest, src) 
	image = format("1100000 00000 %s %3b %s 1010011", src, rm, dest)
	action = {	
		let resultRound = rounding(F[src],rm);

		//TODO output for out-of-range negative input		

		//output for -infinite
		if(resultRound<31..31>==1 && resultRound<30..23>==255) then
			resultRound = coerce(float(23,9),-2**31);
		endif;
		//TODO output for out-of-range positive input

		//output for +infinite or NaN
		if(resultRound<30..23>==255 && resultRound<22..0>!=0) then
			resultRound = coerce(float(23,9),2**31 - 1);
		endif; 
		setR(dest,coerce(word,resultRound));
	}

//   FCVT.WU.S
op fcvt_wu_s(src: freg_t, rm: card(3), dest: reg_t)
	syntax = format("fcvt.wu.s %s, %s", dest, src) 
	image = format("1100000 00001 %s %3b %s 1010011", src, rm, dest)
	action = {
		let resultRound = rounding(F[src],rm);
		
		//TODO output for out-of-range negative input		

		//output for -infinite
		if(resultRound<31..31>==1 && resultRound<30..23>==255) then
			resultRound = coerce(float(23,9),0);
		endif;
		//TODO output for out-of-range positive input

		//output for +infinite or NaN
		if(resultRound<30..23>==255 && resultRound<22..0>!=0) then
			resultRound = coerce(float(23,9),2**31 - 1);
		endif; 

		setR(dest,coerce(uword,resultRound));
	}

//   FCVT.S.W
op fcvt_s_w(src: reg_t, rm: card(3), dest: freg_t)
	syntax =  format("fcvt.s.w %s, %s", dest, src) 
	image = format("1101000 00000 %s %3b %s 1010011", src, rm, dest)
	action = {	
		let resultRound = rounding(coerce(float(23,9),R[src]),rm);
		setF(dest,resultRound);
	}
	
//   FCVT.S.WU
op fcvt_s_wu(src: reg_t, rm: card(3), dest: freg_t)
	syntax =  format("fcvt.s.wu %s, %s", dest, src) 
	image = format("1101000 00001 %s %3b %s 1010011", src, rm, dest)
	action = {	
		let resultRound = rounding(coerce(float(23,9),R[src]),rm);
		setF(dest,resultRound);
	}

//   FMV.W.X
op fmv_w_x(src: reg_t, dest: freg_t)
	syntax = format("fmv.w.x %s, %s", dest, src)
	image = format("1111000 00000 %s 000 %s 1010011", src, dest)
	action = {	
		setF(dest,coerce(float(23,9),R[src]));
	}
	
//   FMV.X.W
op fmv_x_w(src: freg_t, dest: reg_t)
	syntax = format("fmv.w.x %s, %s", dest, src)
	image = format("1110000 00000 %s 000 %s 1010011", src, dest)
	action = {
		setR(dest,coerce(word,F[src]));
	}


// Single-Precision Floating-Point Compare Instructions
// ----------------------------------------------------
//   FLE.S
op fle_s(src2: freg_t, src1: freg_t, dest: reg_t)
	syntax = format("fle.s %s, %s, %s", dest, src1, src2) 
	image = format("1010000 %s %s 000 %s 1010011", src2, src1, dest)
	action = {	
		let sNan = coerce(float(23,9),0b01111111100000000000000000000001);
		let qNan = coerce(float(23,9),0b01111111110000000000000000000001);

		//An invalid operation exception is raised if either input is NaN
		if((F[src2]<30..0>==sNan<30..0> || F[src2]<30..0>==qNan<30..0>) || (F[src1]<30..0>==sNan<30..0> || F[src1]<30..0>==qNan<30..0>)) then
			setR(dest,0);
			SignalException(InvalidOperation);
		else 
			let condition = F[src1] <= F[src2];
			if condition then
				setR(dest,1);
			else 
				setR(dest,0);
			endif;  
		endif;
	}

//   FLT.S
op flt_s(src2: freg_t, src1: freg_t, dest: reg_t)
	syntax = format("flt.s %s, %s, %s", dest, src1, src2) 
	image = format("1010000 %s %s 001 %s 1010011", src2, src1, dest)
	action = {	
		let sNan = coerce(float(23,9),0b01111111100000000000000000000001);
		let qNan = coerce(float(23,9),0b01111111110000000000000000000001);

		//An invalid operation exception is raised if either input is NaN
		if((F[src2]<30..0>==sNan<30..0> || F[src2]<30..0>==qNan<30..0>) || (F[src1]<30..0>==sNan<30..0> || F[src1]<30..0>==qNan<30..0>)) then
			setR(dest,0);
			SignalException(InvalidOperation);
		else 
			let condition = F[src1] <= F[src2];
			if condition then
				setR(dest,1);
			else 
				setR(dest,0);
			endif;  
		endif;
	}
	
//   FEQ.S
op feq_s(src2: freg_t, src1: freg_t, dest: reg_t)
	syntax = format("feq.s %s, %s, %s", dest, src1, src2) 
	image = format("1010000 %s %s 010 %s 1010011", src2, src1, dest)
	action = {	
		let sNan = coerce(float(23,9),0b01111111100000000000000000000001);
		let qNan = coerce(float(23,9),0b01111111110000000000000000000001);

		//Only signaling NaN inputs cause an invalid operation exception
		if(F[src2]<30..0>==sNan<30..0> || F[src1]<30..0>==sNan<30..0>) then
			setR(dest,0);
			SignalException(InvalidOperation);
		else 
			let condition = F[src1] == F[src2];
			if condition then
				setR(dest,1);
			else 
				setR(dest,0);
			endif;  
		endif;
	}

// classification instructions
//	bit sign	    exponent	          fraction
// (F[src]<31..31>   &&   F[src]<30..23>   &&   F[src]<22..0>)
op fclass_s(src: freg_t, dest: reg_t)
	syntax = format("fclass.s %s, %s", dest, src)
	image = format("1110000 00000 %s 001 %s 1010011", src, dest)
	action = {	
		R[dest] = 0;
		// TODO remplacer par switch ? la condition ne peut être qu'un integer (et if .. else if .. pas possible )
		if(F[src]<31..31> == 1 && F[src]<30..23> == 255 && F[src]<22..0> == 0) then
			R[dest] = 1; endif;//NegInfinity, bit 0
		if(F[src]<31..31> == 1 && F[src]<30..23> != 0 && F[src]<30..23> < 255) then
			R[dest] = 1 << 1; endif; //NegNormal, bit 1
		if(F[src]<31..31> == 1 && F[src]<30..23> == 0 && F[src]<22..0> != 0) then
			R[dest] = 1 << 2; endif; //NegSubnormal, bit 2 
		if(F[src]<31..31> == 1 && F[src]<30..23> == 0 && F[src]<22..0> == 0) then
			R[dest] = 1 << 3; endif; //NegZero, bit 3
		if(F[src]<31..31> == 0 && F[src]<30..23> == 0 && F[src]<22..0> == 0) then
			R[dest] = 1 << 4; endif; //PosZero, bit 4
		if(F[src]<31..31> == 0 && F[src]<30..23> == 0 && F[src]<22..0> != 0) then
			R[dest] = 1 << 5; endif; //PosSubnormal, bit 5
		if(F[src]<31..31> == 0 && F[src]<30..23> != 0 && F[src]<30..23> < 255) then
			R[dest] = 1 << 6; endif; //PosNormal, bit 6
		if(F[src]<31..31> == 0 && F[src]<30..23> == 255 && F[src]<22..0> == 0) then
			R[dest] = 1 << 7; endif; //PosInfinity, bit 7
		if(F[src]<30..23> == 255 && F[src]<22..1> == 0 && F[src]<0..0> == 1) then 
			R[dest] = 1 << 8; endif; //SignalingNan, bit 8
		if(F[src]<30..23> == 255 && F[src]<22..22> == 1 && F[src]<21..1> == 0 && F[src]<0..0> == 1) then
			R[dest] = 1 << 9; endif;//QuietNan, bit 9
	}

