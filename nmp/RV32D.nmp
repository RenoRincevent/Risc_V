/*
 *	RISC-V Instruction Set
 *
 *	This file is part of GLISS
 *	Copyright (c) 2017, IRIT UPS.
 *
 *	GLISS is free software; you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation; either version 2 of the License, or
 *	(at your option) any later version.
 *
 *	GLISS is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	You should have received a copy of the GNU General Public License
 *	along with GLISS; if not, write to the Free Software
 *	Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

// Floating Point Operations
op rv32d =
	  fld
	| fsd
	| fmadd_d
	| fmsub_d
	| fnmsub_d
	| fnmadd_d
	| fadd_d
	| fsub_d
	| fmul_d
	| fdiv_d
	| fsqrt_d
	| fsgnj_d
	| fsgnjn_d
	| fsgnjx_d
	| fmin_d
	| fmax_d
	| fcvt_s_d
	| fcvt_d_s
	| feq_d
	| flt_d
	| fle_d
	| fclass_d
	| fcvt_w_d
	| fcvt_wu_d
	| fcvt_d_w
	| fcvt_d_wu

// 9.3 Double-Precision Load and Store Instructions
// ------------------------------------------------
op fld(offset: int(12), base: reg_t, dest: freg_t)
	syntax = format("fld %s, %d(%s)", dest, offset, base)
	image = format("%12b %s 011 %s 0000111", offset, base, dest)
	action = {
		let vAddr = offset + R[base];
		let memword = M32F[vAddr];
		F[dest] = memword ;
	}

op fsd(offset: int(12), src: freg_t, base: reg_t)
	syntax = format("fsd %s, %d(%s)", src, offset, base)
	image = format("%7b %s %s 011 %5b 0100111", offset<11..5>, src, base, offset<4..0>)
	action = {
		let vAddr = R[base];
		let data = F[src];
		if offset<11..11> == 1 then //nombre negatif => complement a deux
			offset = offset - 1;
			offset = ~offset;
			vAddr = vAddr - offset<10..0>;
		else
			vAddr = vAddr + offset;
		endif;
		M32F[vAddr] = data;
	}


// 9.4 Double-Precision Floating-Point Computational Instructions
// --------------------------------------------------------------
op fadd_d(src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fadd.d %s, %s, %s", dest, src1, src2)
	image = format("0000001 %s %s %3b %s 1010011", src2, src1, rm, dest)
	action = {
		"fp_clearexcept"("FP_ALLEXCEPT");
		F[dest] = F[src1] + F[src2];
		if("fp_testexcept"("FP_INEXACT")) then
			CSRS[1] = 1;
		endif;
	}

op fsub_d(src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fsub.d %s, %s, %s", dest, src1, src2)
	image = format("0000101 %s %s %3b %s 1010011", src2, src1, rm, dest)
	action = {
		"fp_clearexcept"("FP_ALLEXCEPT");
		F[dest] = F[src1] - F[src2];
		if("fp_testexcept"("FP_INEXACT")) then
			CSRS[1] = 1;
		endif;
		if("fp_testexcept"("FP_INVALID")) then
			CSRS[1] = 16;
			F[dest]<63..0> = 0x7ff8000000000000;
		endif;
	}

op fmul_d(src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fmul.d %s, %s, %s", dest, src1, src2)
	image = format("0001001 %s %s %3b %s 1010011", src2, src1, rm, dest)
	action = {
		"fp_clearexcept"("FP_ALLEXCEPT");
		F[dest] = F[src1] * F[src2];
		if("fp_testexcept"("FP_INEXACT")) then
			CSRS[1] = 1;
		endif;
	}

op fdiv_d(src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fdiv.d %s, %s, %s", dest, src1, src2)
	image = format("0001101 %s %s %3b %s 1010011", src2, src1, rm, dest)
	action = {
		"fp_clearexcept"("FP_ALLEXCEPT");
		F[dest] = F[src1] / F[src2];
		if("fp_testexcept"("FP_INEXACT")) then
			CSRS[1] = 1;
		endif;
		if("fp_testexcept"("FP_DIVBYZERO")) then
			CSRS[1] = 8;
			//return nan or infinite ?
		endif;
	}


op fmin_d(src2: freg_t, src1: freg_t, dest: freg_t)
	syntax = format("fmin.d %s, %s, %s", dest, src1, src2)
	image = format("0010101 %s %s 000 %s 1010011", src2, src1, dest)
	action = {
		let NaN = 0;

		//If both inputs are NaNs, the result is the canonical NaN
		if (F[src1]<62..52>==0x7ff && F[src1]<51..0>!=0) && (F[src2]<62..52>==0x7ff && F[src2]<51..0>!=0) then
			NaN = 1;
			F[dest]<63..0> = 0x7ff8000000000000;
			// Signaling NaN inputs set the invalid operation exception flag
			if F[src1]<62..0>==0x7ff0000000000001 || F[src2]<62..0>==0x7ff0000000000001 then
				CSRS[1] = 16;
			endif;
		endif;

		//If only one operand is a NaN, the result is the non-NaN operand.
		if(!NaN && (F[src1]<62..52>==0x7ff && F[src1]<2..0>!=0) && !(F[src2]<62..52>==0x7ff && F[src2]<51..0>!=0)) then
			NaN = 1;
			F[dest]<63..0> = F[src2]<63..0>;
			if F[src1]<62..0>==0x7ff0000000000001 then
				CSRS[1] = 16;
			endif;
		endif;
		if(!NaN && (F[src2]<62..52>==0x7ff && F[src2]<2..0>!=0) && !(F[src1]<62..52>==0x7ff && F[src1]<51..0>!=0)) then
			NaN = 1;
			F[dest]<63..0> = F[src1]<63..0>;
			if F[src2]<62..0>==0x7ff0000000000001 then
				CSRS[1] = 16;
			endif;
		endif;

		if !NaN then
			let condition = F[src1] < F[src2]; //TODO comment cela ce passe si les deux sont égaux ? une valeur a prendre en priorité ?
			if condition then
				setF(dest,F[src1]);
			else
				setF(dest,F[src2]);
			endif;
			//the value −0.0 is considered to be less than the value +0.0.
			if F[src1]<63..0> == 0x8000000000000000 && F[src2]<63..0> == 0x0000000000000000 then
				F[dest]<63..0> = F[src1]<63..0>;
			else
				if F[src1]<63..0> == 0x0000000000000000 && F[src2]<63..0> == 0x8000000000000000 then
					F[dest]<63..0> = F[src2]<63..0>;
				endif;
			endif;
		endif;

	}

op fmax_d(src2: freg_t, src1: freg_t, dest: freg_t)
	syntax = format("fmax.d %s, %s, %s", dest, src1, src2)
	image = format("0010101 %s %s 001 %s 1010011", src2, src1, dest)
	action = {
		let NaN = 0;

		//If both inputs are NaNs, the result is the canonical NaN
		if (F[src1]<62..52>==0x7ff && F[src1]<51..0>!=0) && (F[src2]<62..52>==0x7ff && F[src2]<51..0>!=0) then
			NaN = 1;
			F[dest]<63..0> = 0x7ff8000000000000;
			// Signaling NaN inputs set the invalid operation exception flag
			if F[src1]<62..0>==0x7ff0000000000001 || F[src2]<62..0>==0x7ff0000000000001 then
				CSRS[1] = 16;
			endif;
		endif;

		//If only one operand is a NaN, the result is the non-NaN operand.
		if(!NaN && (F[src1]<62..52>==0x7ff && F[src1]<2..0>!=0) && !(F[src2]<62..52>==0x7ff && F[src2]<51..0>!=0)) then
			NaN = 1;
			F[dest]<63..0> = F[src2]<63..0>;
			if F[src1]<62..0>==0x7ff0000000000001 then
				CSRS[1] = 16;
			endif;
		endif;
		if(!NaN && (F[src2]<62..52>==0x7ff && F[src2]<2..0>!=0) && !(F[src1]<62..52>==0x7ff && F[src1]<51..0>!=0)) then
			NaN = 1;
			F[dest]<63..0> = F[src1]<63..0>;
			if F[src2]<62..0>==0x7ff0000000000001 then
				CSRS[1] = 16;
			endif;
		endif;

		if !NaN then
			let condition = F[src1] > F[src2];
			if condition then
				setF(dest,F[src1]);
			else
				setF(dest,F[src2]);
			endif;
			//the value −0.0 is considered to be less than the value +0.0.
			if F[src1]<63..0> == 0x8000000000000000 && F[src2]<63..0> == 0x0000000000000000 then
				F[dest]<63..0> = F[src2]<63..0>;
			else
				if F[src1]<63..0> == 0x0000000000000000 && F[src2]<63..0> == 0x8000000000000000 then
					F[dest]<63..0> = F[src1]<63..0>;
				endif;
			endif;
		endif;
	}

op fsqrt_d(src: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fsqrt.d %s, %s", dest, src)
	image = format("0101101 00000 %s %3b %s 1010011", src, rm, dest)
	action = {
		"fp_clearexcept"("FP_ALLEXCEPT");
		F[dest] = "fp_sqrt"(F[src]);
		if("fp_testexcept"("FP_INEXACT")) then
			CSRS[1] = 1;
		endif;
		if("fp_testexcept"("FP_INVALID")) then
			CSRS[1] = 16;
			F[dest]<63..0> = 0x7ff8000000000000;
		endif;
	}

	// fused multiply add/sub
op fmadd_d(src3: freg_t, src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fmadd.d %s, %s, %s, %s", dest, src1, src2, src3)
	image = format("%s 01 %s %s %3b %s 1000011", src3, src2, src1, rm, dest)
	action = {
		"fp_clearexcept"("FP_ALLEXCEPT");
		F[dest] = F[src1] * F[src2] + F[src3];
		if("fp_testexcept"("FP_INEXACT")) then
			CSRS[1] = 1;
		endif;
	}

op fmsub_d(src3: freg_t, src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fmsub.d %s, %s, %s, %s", dest, src1, src2, src3)
	image = format("%s 01 %s %s %3b %s 1000111", src3, src2, src1, rm, dest)
	action = {
		"fp_clearexcept"("FP_ALLEXCEPT");
		F[dest] = F[src1] * F[src2] - F[src3];
		if("fp_testexcept"("FP_INEXACT")) then
			CSRS[1] = 1;
		endif;
	}

op fnmadd_d(src3: freg_t, src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fnmadd.d %s, %s, %s, %s", dest, src1, src2, src3)
	image = format("%s 01 %s %s %3b %s 1001111", src3, src2, src1, rm, dest)
	action = {
		"fp_clearexcept"("FP_ALLEXCEPT");
		F[dest] = -F[src1] * F[src2] - F[src3];
		if("fp_testexcept"("FP_INEXACT")) then
			CSRS[1] = 1;
		endif;
	}

op fnmsub_d(src3: freg_t, src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fnmsub.d %s, %s, %s, %s", dest, src1, src2, src3)
	image = format("%s 01 %s %s %3b %s 1001011", src3, src2, src1, rm, dest)
	action = {
		"fp_clearexcept"("FP_ALLEXCEPT");
		F[dest] = -F[src1] * F[src2] + F[src3];
		if("fp_testexcept"("FP_INEXACT")) then
			CSRS[1] = 1;
		endif;
	}


// 9.5 Double-Precision Floating-Point Conversion and Move Instructions
// --------------------------------------------------------------------

op fsgnj_d(src2: freg_t, src1: freg_t,  dest: freg_t)
	syntax = if src1 == src2 then
		format("fmv.d %s, %s", dest, src1)
		else format("fsgnj.d %s, %s, %s", dest, src1, src2) endif
	image = format("0010001 %s %s 000 %s 1010011", src2, src1,  dest)
	action = {
		F[dest]<63..0> = F[src2]<63..63>::F[src1]<62..0>;
	}


op fsgnjn_d(src2: freg_t, src1: freg_t,  dest: freg_t)
	syntax = if src1 == src2 then
		format("fneg.d %s, %s", dest, src1)
		else format("fsgnjn.d %s, %s, %s", dest, src1, src2) endif
	image = format("0010001 %s %s 001 %s 1010011", src2, src1,  dest)
	action = {
		F[dest]<63..0> = (~F[src2]<63..63>)::F[src1]<62..0>;
	}

op fsgnjx_d(src2: freg_t, src1: freg_t, dest: freg_t)
	syntax = if src1 == src2 then
		format("fabs.d %s, %s", dest, src1)
		else format("fsgnjx.d %s, %s, %s", dest, src1, src2) endif
	image = format("0010001 %s %s 010 %s 1010011", src2, src1, dest)
	action = {
		F[dest]<63..0> = (F[src2]<63..63> ^ F[src1]<63..63>)::F[src1]<62..0>;
	}

op fcvt_s_d(src: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fcvt.s.d %s, %s", dest, src)
	image = format("0100000 00001 %s %3b %s 1010011", src, rm, dest)
	action = {
		if F[src]<62..52>==0x7ff && F[src]<51..0>!=0 then
			F[dest]<31..0> = 0x7fc00000;
		else
			let sr : float(52,12) = F[src];
			F[dest]<31..0> = coerce(float(23,9),sr);
		endif;
	}

op fcvt_d_s( src: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fcvt.d.s %s, %s", dest, src)
	image = format("0100001 00000 %s %3b %s 1010011", src, rm, dest)
	action = {
		//FCVT.D.S will never round
		if F[src]<30..23>==0b11111111 && F[src]<22..0>!=0 then
			F[dest]<63..0> = 0x7ff8000000000000;
		else
			let sr : float(23,9) = F[src]<31..0>;
			F[dest]<63..0> = coerce(float(52,12),sr);
		endif;
	}

op fcvt_w_d(src: freg_t, rm: card(3), dest: reg_t)
	syntax =  format("fcvt.w.d %s, %s", dest, src)
	image = format("1100001 00000 %s %3b %s 1010011", src, rm, dest)
	action = {
		let f : float(52,12) = F[src]<63..0>;
		if f != coerce(float(52,12),coerce(word,f)) then
			/* Inexact : flag NX = 1 */
			CSRS[1] = 1;
		endif;
		setR(dest,coerce(word,F[src]));

		//output for out-of-range negative input
		if(f < coerce(float(52,12),(-2**31)) ) then
			setR(dest,0x80000000);
			CSRS[1]=16;
		endif;

		//output for -infinite
		if(F[src]<63..0>==0xfff0000000000000) then
			setR(dest,0x80000000);
			CSRS[1]=16;
		endif;

		//output for out-of-range positive input
		if(f > coerce(float(52,12),(2**31 - 1)) ) then
			setR(dest,0x7fffffff);
			CSRS[1]=16;
		endif;

		//output for +infinite or NaN
		if(F[src]<63..0> == 0x7ff0000000000000 || (F[src]<62..52>==0x7ff && F[src]<51..0>!=0)) then
			setR(dest,0x7fffffff);
			CSRS[1]=16;
		endif;
	}

op fcvt_wu_d(src: freg_t, rm: card(3), dest: reg_t)
	syntax = format("fcvt.wu.d %s, %s", dest, src)
	image = format("1100001 00001 %s %3b %s 1010011", src, rm, dest)
	action = {
		let f : float(52,12) = F[src]<63..0>;
		if f != coerce(float(52,12),coerce(int(64),f)) then
			/* Inexact : flag NX = 1 */
			CSRS[1] = 1;
		endif;
		setR(dest,coerce(uword,F[src]));

		//output for out-of-range negative input
		if(coerce(int(64),f)<63..63>==1) then
			setR(dest,0x00000000);
			CSRS[1]=16;
		endif;

		//output for -infinite
		if(F[src]<63..0>==0xfff0000000000000) then
			setR(dest,0x00000000);
			CSRS[1]=16;
		endif;

		//output for out-of-range positive input
		if(coerce(int(64),f) > coerce(int(64),0xffffffff)) then
			setR(dest,0xffffffff);
			CSRS[1]=16;
		endif;

		//output for +infinite or NaN
		if(F[src]<63..0> == 0x7ff0000000000000 || (F[src]<62..52>==0x7ff && F[src]<51..0>!=0)) then
			setR(dest,0xffffffff);
			CSRS[1]=16;
		endif;
	}

op fcvt_d_w(src: reg_t, rm: card(3), dest: freg_t)
	syntax =  format("fcvt.d.w %s, %s", dest, src)
	image = format("1101001 00000 %s %3b %s 1010011", src, rm, dest)
	action = {
		F[dest]<63..0> = coerce(float(52,12),R[src]);
	}

op fcvt_d_wu(src: reg_t, rm: card(3), dest: freg_t)
	syntax = format("fcvt.d.wu %s, %s", dest, src)
	image  = format("1101001 00001 %s %3b %s 1010011", src, rm, dest)
	action = {
		F[dest]<63..0> = coerce(float(52,12),coerce(uword,R[src]));
	}

// 9.6 Double-Precision Floating-Point Compare Instructions
// ----------------------------------------------------
op fle_d(src2: freg_t, src1: freg_t, dest: reg_t)
	syntax = format("fle.d %s, %s, %s", dest, src1, src2)
	image = format("1010001 %s %s 000 %s 1010011", src2, src1, dest)
	action = {
		//An invalid operation exception is raised if either input is NaN
		if((F[src1]<62..52>==0x7ff && F[src1]<51..0>!=0) || (F[src2]<62..52>==0x7ff && F[src2]<51..0>!=0)) then
			setR(dest,0);
			/* Invalid Operation : flag NV = 1 */
			CSRS[1] = 16;
		else
			let condition = F[src1] <= F[src2];
			if condition then
				setR(dest,1);
			else
				setR(dest,0);
			endif;
		endif;
	}

op flt_d(src2: freg_t, src1: freg_t, dest: reg_t)
	syntax = format("flt.d %s, %s, %s", dest, src1, src2)
	image = format("1010001 %s %s 001 %s 1010011", src2, src1, dest)
	action = {
		//An invalid operation exception is raised if either input is NaN
		if((F[src1]<62..52>==0x7ff && F[src1]<51..0>!=0) || (F[src2]<62..52>==0x7ff && F[src2]<51..0>!=0)) then
			setR(dest,0);
			/* Invalid Operation : flag NV = 1 */
			CSRS[1] = 16;
		else
			let condition = F[src1] < F[src2];
			if condition then
				setR(dest,1);
			else
				setR(dest,0);
			endif;
		endif;
	}

op feq_d(src2: freg_t, src1: freg_t, dest: reg_t)
	syntax = format("feq.d %s, %s, %s", dest, src1, src2)
	image = format("1010001 %s %s 010 %s 1010011", src2, src1, dest)
	action = {
		//Only signaling NaN inputs cause an invalid operation exception
		if(F[src1]<62..0> == 0x7ff0000000000001 || F[src2]<62..0> == 0x7ff0000000000001) then
			setR(dest,0);
			/* Invalid Operation : flag NV = 1 */
			CSRS[1] = 16;
		else
			let condition = F[src1] == F[src2];
			if condition then
				setR(dest,1);
			else
				setR(dest,0);
			endif;
		endif;
	}

// 9.7 Double-Precision Floating-Point Classify Instruction
// --------------------------------------------------------
//	bit sign	    exponent	          mantissa
// (F[src]<63..63>   &&   F[src]<62..52>   &&   F[src]<51..0>)
op fclass_d(src: freg_t, dest: reg_t)
	syntax = format("fclass.d %s, %s", dest, src)
	image = format("1110001 00000 %s 001 %s 1010011", src, dest)
	action = {
		setR(dest,0);
		//NegInfinity, bit 0
		if(F[src]<63..0> == 0xfff0000000000000) then
			setR(dest,1);
		endif;
		//NegNormal, bit 1
		if(F[src]<63..63>==1 && F[src]<62..52>!=0 && F[src]<62..52> < 0b11111111111) then
			setR(dest,1<<1);
		endif;
		//NegSubnormal, bit 2
		if(F[src]<63..52>==0b100000000000 && F[src]<51..0>!=0) then
			setR(dest,1<<2);
		endif;
		//NegZero, bit 3
		if(F[src]<63..0> == 0x8000000000000000) then
			setR(dest,1<<3);
		endif;
		//PosZero, bit 4
		if(F[src]<63..0> == 0x0000000000000000) then
			setR(dest,1<<4);
		endif;
		//PosSubnormal, bit 5
		if(F[src]<63..52>==0 && F[src]<51..0>!=0) then
			setR(dest,1<<5);
		endif;
		//PosNormal, bit 6
		if(F[src]<63..63>==0 && F[src]<62..52> > 0 && F[src]<62..52> < 0b11111111111) then
			setR(dest,1<<6);
		endif;
		//PosInfinity, bit 7
		if(F[src]<63..0> == 0x7ff0000000000000) then
			setR(dest,1<<7);
		endif;
		//SignalingNan, bit 8
		if(F[src]<62..0> == 0x7ff0000000000001) then
			setR(dest,1<<8);
		endif;
		//QuietNan, bit 9
		if(F[src]<62..0> == 0x7ff8000000000000) then
			setR(dest,1<<9);
		endif;

	}
