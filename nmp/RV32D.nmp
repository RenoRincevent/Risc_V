/*
 *	RISC-V Instruction Set
 *
 *	This file is part of GLISS
 *	Copyright (c) 2017, IRIT UPS.
 *
 *	GLISS is free software; you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation; either version 2 of the License, or
 *	(at your option) any later version.
 *
 *	GLISS is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	You should have received a copy of the GNU General Public License
 *	along with GLISS; if not, write to the Free Software
 *	Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

// Floating Point Operations
op rv32d =
	  fld
	| fsd
	| fmadd_d
	| fmsub_d
	| fnmsub_d
	| fnmadd_d
	| fadd_d
	| fsub_d
	| fmul_d
	| fdiv_d
	| fsqrt_d
	| fsgnj_d 
	| fsgnjn_d 
	| fsgnjx_d 	
	| fmin_d
	| fmax_d
	| fcvt_s_d
	| fcvt_d_s
	| feq_d	
	| flt_d
	| fle_d
	| fclass_d
	| fcvt_w_d
	| fcvt_wu_d
	| fcvt_d_w
	| fcvt_d_wu

// 9.3 Double-Precision Load and Store Instructions
// ------------------------------------------------
op fld(offset: int(12), base: reg_t, dest: freg_t)
	syntax = format("fld %s, %d(%s)", dest, offset, base)
	image = format("%12b %s 011 %s 0000111", offset, base, dest)
	action = {	
		let vAddr = offset + R[base];
		let memword = M32D[vAddr];
		setD(dest, memword) ;
	}

op fsd(offset: int(12), src: freg_t, base: reg_t)
	syntax = format("fsd %s, %d(%s)", src, offset, base)
	image = format("%7b %s %s 011 %5b 0100111", offset<11..5>, src, base, offset<4..0>)
	action = {	
		let vAddr = offset + R[base];
		AddressTranslation(pAddr, uncached, vAddr, DATA, STORE);
		let dataword = D[src];
		StoreMemoryWORDD(uncached, dataword, pAddr, vAddr);
	}


// 9.4 Double-Precision Floating-Point Computational Instructions
// --------------------------------------------------------------
op fadd_d(src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fadd.d %s, %s, %s", dest, src1, src2)
	image = format("0000001 %s %s %3b %s 1010011", src2, src1, rm, dest)
	action = {	
		let r1 = D[src1];
		let r2 = D[src2];
		let roundingMod = rm;

		let result = r1+r2;
		if roundingMod == 7 then
			roundingMod = FCSR<7..5>;
		endif;
		let resultRound = roundingDouble(result,roundingMod); 
		setD(dest,resultRound);
	}

op fsub_d(src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fsub.d %s, %s, %s", dest, src1, src2)
	image = format("0000101 %s %s %3b %s 1010011", src2, src1, rm, dest)
	action = {	
		let r1 = D[src1];
		let r2 = D[src2];
		let roundingMod = rm;

		let result = r1-r2;
		if roundingMod == 7 then
			roundingMod = FCSR<7..5>;
		endif;
		let resultRound = roundingDouble(result,roundingMod); 
		setD(dest,resultRound);
	}

op fmul_d(src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fmul.d %s, %s, %s", dest, src1, src2)
	image = format("0001001 %s %s %3b %s 1010011", src2, src1, rm, dest)
	action = {	
		let r1 = D[src1];
		let r2 = D[src2];
		let roundingMod = rm;

		let result = r1*r2;
		if roundingMod == 7 then
			roundingMod = FCSR<7..5>;
		endif;
		let resultRound = roundingDouble(result,roundingMod); 
		setD(dest,resultRound);
	}

op fdiv_d(src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fdiv.d %s, %s, %s", dest, src1, src2)
	image = format("0001101 %s %s %3b %s 1010011", src2, src1, rm, dest)
	action = {	
		let r1 = D[src1];
		let r2 = D[src2];
		if r2 == 0 then FCSR<3..3> = 1; endif;
		let roundingMod = rm;

		let result = r1/r2;
		if roundingMod == 7 then
			roundingMod = FCSR<7..5>;
		endif;
		let resultRound = roundingDouble(result,roundingMod); 
		setD(dest,resultRound);
	}
	

op fmin_d(src2: freg_t, src1: freg_t, dest: freg_t)
	syntax = format("fmin.d %s, %s, %s", dest, src1, src2)  
	image = format("0010101 %s %s 000 %s 1010011", src2, src1, dest)
	action = {	
		let NaN = 1;
		let sNan = coerce(float(52,12),0b0111111111110000000000000000000000000000000000000000000000000001);
		let qNan = coerce(float(52,12),0b0111111111111000000000000000000000000000000000000000000000000001);
		let nanCanonical = coerce(float(52,12),0b0111111111111111111111111111111111111111111111111111111111111111);

		//if at least one input is a signaling NaN, or if both inputs are quiet NaNs, the result is the canonical NaN
		if((D[src1]<62..0> == sNan<62..0> || D[src2]<62..0> == sNan<62..0>) || (D[src1]<62..0> == qNan<62..0> && D[src2]<62..0> == qNan<62..0>)) then
			NaN = 0;			
			setD(dest,nanCanonical);
		endif;

		//If one operand is a quiet NaN and the other is not a NaN, the result is the non-NaN operand.
		if(!NaN && D[src1]<62..0> == qNan<62..0> && !(D[src2]<62..0> == qNan<62..0> || D[src2]<62..0> == sNan<62..0>)) then
			NaN = 0;
			setD(dest,D[src2]);
		endif;
		if(!NaN && D[src2]<62..0> == qNan<62..0> && !(D[src1]<62..0> == qNan<62..0> || F[src1]<62..0> == sNan<62..0>)) then
			NaN = 0;
			setD(dest,D[src1]);
		endif;

		if !NaN then
			let condition = D[src1] < D[src2]; //TODO comment cela ce passe si les deux sont égaux ? une valeur a prendre en priorité ?
			if condition then
				setD(dest,D[src1]);
			else 
				setD(dest,D[src2]);
			endif;
		endif;

	}

op fmax_d(src2: freg_t, src1: freg_t, dest: freg_t)
	syntax = format("fmax.d %s, %s, %s", dest, src1, src2)
	image = format("0010101 %s %s 001 %s 1010011", src2, src1, dest)
	action = {	
		let NaN = 1;
		let sNan = coerce(float(52,12),0b0111111111110000000000000000000000000000000000000000000000000001);
		let qNan = coerce(float(52,12),0b0111111111111000000000000000000000000000000000000000000000000001);
		let nanCanonical = coerce(float(52,12),0b0111111111111111111111111111111111111111111111111111111111111111);

		//if at least one input is a signaling NaN, or if both inputs are quiet NaNs, the result is the canonical NaN
		if((D[src1]<62..0> == sNan<62..0> || D[src2]<62..0> == sNan<62..0>) || (D[src1]<62..0> == qNan<62..0> && D[src2]<62..0> == qNan<62..0>)) then
			NaN = 0;			
			setD(dest,nanCanonical);
		endif;

		//If one operand is a quiet NaN and the other is not a NaN, the result is the non-NaN operand.
		if(!NaN && D[src1]<62..0> == qNan<62..0> && !(D[src2]<62..0> == qNan<62..0> || D[src2]<62..0> == sNan<62..0>)) then
			NaN = 0;
			setD(dest,D[src2]);
		endif;
		if(!NaN && D[src2]<62..0> == qNan<62..0> && !(D[src1]<62..0> == qNan<62..0> || F[src1]<62..0> == sNan<62..0>)) then
			NaN = 0;
			setD(dest,D[src1]);
		endif;

		if !NaN then
			let condition = D[src1] > D[src2]; //TODO comment cela ce passe si les deux sont égaux ? une valeur a prendre en priorité ?
			if condition then
				setD(dest,D[src1]);
			else 
				setD(dest,D[src2]);
			endif;
		endif;
	}
	
op fsqrt_d(src: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fsqrt.d %s, %s", dest, src)
	image = format("0101101 00000 %s %3b %s 1010011", src, rm, dest)
	action = {	
		let domainError = 1;
		let Nan = coerce(float(52,12),0b0111111111111111111111111111111111111111111111111111111111111111);

		//If D[src] is NaN, a NaN shall be returned.
		if(D[src]<62..52>==Nan<62..52> && D[src]<51..0>!=0) then
			setD(dest,D[src]);
			domainError = 0;
		endif;

		//If D[src] is ±0 or +Inf, D[src] shall be returned.
		if(D[src]<62..0> == 0 || (D[src]<63..63> == 0 && D[src]<62..52> == 0b11111111111 && D[src]<51..0> == 0)) then
			setD(dest,D[src]);
			domainError = 0;
		endif;

		//If D[src] is -Inf or < 0, a domain error shall occur, and a NaN shall be returned
		if(D[src]<63..63> == 1) then
			SignalException(InvalidOperation);
			FCSR<4..4> = 1;
			setD(dest,Nan);
			domainError = 0;
		endif;

		//If D[src] -> PosNormal, compute sqrt
		if(!domainError) then	
			let result = fsqrt64(D[src]);
			let roundingMod = rm;
			if roundingMod == 7 then
				roundingMod = FCSR<7..5>;
			endif;
			let resultRound = roundingDouble(result,roundingMod);
			setF(dest,resultRound);
		endif;
	}

	// fused multiply add/sub
op fmadd_d(src3: freg_t, src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fmadd.d %s, %s, %s, %s", dest, src1, src2, src3)
	image = format("%s 01 %s %s %3b %s 1000011", src3, src2, src1, rm, dest)
	action = {	
		let r1 = D[src1]; //reg F[32, float(23,9)]
		let r2 = D[src2];
		let r3 = D[src3];
		let roundingMod = rm;

		//raise the invalid operation exception when the multiplicands are infinite and zero
		if(r1<62..52> == 0b11111111111 && r1<51..0> == 0 && r2 == 0) || (r2<62..52> == 0b11111111111 && r2<51..0> == 0 && r1 == 0) then
			FCSR<4..4> = 1;
			SignalException(InvalidOperation);			
		else
			let result = r1*r2+r3;
			if roundingMod == 7 then
				roundingMod = FCSR<7..5>;
			endif;
			let resultRound = roundingDouble(result,roundingMod); //TODO fction d'arrondi, arrondi a la dizaine, l'unité,le dixième ? 
			setD(dest,resultRound); 
		endif;
	}

op fmsub_d(src3: freg_t, src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fmsub.d %s, %s, %s, %s", dest, src1, src2, src3)
	image = format("%s 01 %s %s %3b %s 1000111", src3, src2, src1, rm, dest)
	action = {	
		let r1 = D[src1];
		let r2 = D[src2];
		let r3 = D[src3];
		let roundingMod = rm;

		//raise the invalid operation exception when the multiplicands are infinite and zero
		if(r1<62..52> == 0b11111111111 && r1<51..0> == 0 && r2 == 0) || (r2<62..52> == 0b11111111111 && r2<51..0> == 0 && r1 == 0) then
			FCSR<4..4> = 1;
			SignalException(InvalidOperation);			
		else
			let result = r1*r2-r3;
			if roundingMod == 7 then
				roundingMod = FCSR<7..5>;
			endif;
			let resultRound = roundingDouble(result,roundingMod); 
			setD(dest,resultRound); 
		endif;
	}

op fnmadd_d(src3: freg_t, src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fnmadd.d %s, %s, %s, %s", dest, src1, src2, src3)
	image = format("%s 01 %s %s %3b %s 1001111", src3, src2, src1, rm, dest)
	action = {	
		let r1 = D[src1];
		let r2 = D[src2];
		let r3 = D[src3];
		let roundingMod = rm;

		//raise the invalid operation exception when the multiplicands are infinite and zero
		if(r1<62..52> == 0b11111111111 && r1<51..0> == 0 && r2 == 0) || (r2<62..52> == 0b11111111111 && r2<51..0> == 0 && r1 == 0) then
			FCSR<4..4> = 1;
			SignalException(InvalidOperation);			
		else
			let result = -r1*r2-r3;
			if roundingMod == 7 then
				roundingMod = FCSR<7..5>;
			endif;
			let resultRound = roundingDouble(result,roundingMod); 
			setD(dest,resultRound); 
		endif;
	}

op fnmsub_d(src3: freg_t, src2: freg_t, src1: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fnmsub.d %s, %s, %s, %s", dest, src1, src2, src3)
	image = format("%s 01 %s %s %3b %s 1001011", src3, src2, src1, rm, dest)
	action = {	
		let r1 = D[src1];
		let r2 = D[src2];
		let r3 = D[src3];
		let roundingMod = rm;

		//raise the invalid operation exception when the multiplicands are infinite and zero
		if(r1<62..52> == 0b11111111111 && r1<51..0> == 0 && r2 == 0) || (r2<62..52> == 0b11111111111 && r2<51..0> == 0 && r1 == 0) then
			FCSR<4..4> = 1;
			SignalException(InvalidOperation);			
		else
			let result = -r1*r2+r3;
			if roundingMod == 7 then
				roundingMod = FCSR<7..5>;
			endif;
			let resultRound = roundingDouble(result,roundingMod); 
			setD(dest,resultRound); 
		endif;
	}


// 9.5 Double-Precision Floating-Point Conversion and Move Instructions
// --------------------------------------------------------------------

op fsgnj_d(src2: freg_t, src1: freg_t,  dest: freg_t)
	syntax = if src1 == src2 then 
		format("fmv.s %s, %s", dest, src1)
		else format("fsgnj.d %s, %s, %s", dest, src1, src2) endif 
	image = format("0010001 %s %s 000 %s 1010011", src2, src1,  dest)
	action = {
		if D[src1]==D[src2] then
			setD(dest,D[src1]);
		else			
			setD(dest,coerce(float(52,12),D[src2]<63..63>::D[src1]<62..0>));
		endif;
	}
	
	
op fsgnjn_d(src2: freg_t, src1: freg_t,  dest: freg_t)
	syntax = if src1 == src2 then
		format("fneg.s %s, %s", dest, src1)
		else format("fsgnjn.d %s, %s, %s", dest, src1, src2) endif
	image = format("0010001 %s %s 001 %s 1010011", src2, src1,  dest)
	action = {	
		if D[src1]==D[src2] then
			setD(dest,-D[src1]);
		else			
			setD(dest,coerce(float(52,12),(-D[src2]<63..63>)::D[src1]<62..0>));
		endif;
	}
		
op fsgnjx_d(src2: freg_t, src1: freg_t, dest: freg_t)
	syntax = if src1 == src2 then 
		format("fabs.s %s, %s", dest, src1) 
		else format("fsgnjx.d %s, %s, %s", dest, src1, src2) endif
	image = format("0010001 %s %s 010 %s 1010011", src2, src1, dest)
	action = {	
		if D[src1]==D[src2] then
			D[src1]<63..63>=0;
			setD(dest,D[src1]);
		else			
			setD(dest,coerce(float(52,12),(D[src2]<63..63> ^ D[src1]<63..63>)::D[src1]<62..0>));
		endif;
	}

op fcvt_s_d(src: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fcvt.s.d %s, %s", dest, src) 
	image = format("0100000 00001 %s %3b %s 1010011", src, rm, dest)
	action = {	
		let resultRound = rounding(coerce(float(23,9),D[src]),rm);
		setF(dest,resultRound);
	}
	
op fcvt_d_s( src: freg_t, rm: card(3), dest: freg_t)
	syntax = format("fcvt.d.s %s, %s", dest, src)
	image = format("0100001 00000 %s %3b %s 1010011", src, rm, dest)
	action = {
		//FCVT.D.S will never round	
		setD(dest,coerce(float(52,12),F[src]));
	}

op fcvt_w_d(src: freg_t, rm: card(3), dest: reg_t)
	syntax =  format("fcvt.w.d %s, %s", dest, src) 
	image = format("1100001 00000 %s %3b %s 1010011", src, rm, dest)
	action = {	
		setR(dest,coerce(word,D[src]));
	}

op fcvt_wu_d(src: freg_t, rm: card(3), dest: reg_t)
	syntax = format("fcvt.wu.d %s, %s", dest, src)
	image = format("1100001 00001 %s %3b %s 1010011", src, rm, dest)
	action = {	
		setR(dest,coerce(uword,D[src]));
		//output for out-of-range negative input
		if(D[src]<63..63>==1) then
			setR(dest,coerce(uword,0));
		endif;		

		//output for out-of-range positive input
		if(D[src] > (2*32 - 1)) then
			setR(dest,coerce(uword,2**32 - 1));
		endif;

		//output for +infinite or NaN
		if(D[src]<63..52>==0b111111111111 || (D[src]<62..52>==0b11111111111 && D[src]<51..0>!=0)) then
			setR(dest,coerce(uword,2**32 - 1));
		endif; 
	}

op fcvt_d_w(src: reg_t, rm: card(3), dest: freg_t)
	syntax =  format("fcvt.d.w %s, %s", dest, src) 
	image = format("1101001 00000 %s %3b %s 1010011", src, rm, dest)
	action = {	
		setD(dest,coerce(float(52,12),R[src]));
	}
	
op fcvt_d_wu(src: reg_t, rm: card(3), dest: freg_t)
	syntax = format("fcvt.d.wu %s, %s", dest, src)
	image  = format("1101001 00001 %s %3b %s 1010011", src, rm, dest)
	action = {	
		setD(dest,coerce(float(52,12),R[src]));
	}

// 9.6 Double-Precision Floating-Point Compare Instructions
// ----------------------------------------------------
op fle_d(src2: freg_t, src1: freg_t, dest: reg_t)
	syntax = format("fle.d %s, %s, %s", dest, src1, src2) 
	image = format("1010001 %s %s 000 %s 1010011", src2, src1, dest)
	action = {	
		//An invalid operation exception is raised if either input is NaN
		if((D[src1]<62..52>==0b11111111111 && D[src1]<51..0>!=0) || (D[src2]<62..52>==0b11111111111 && D[src2]<51..0>!=0)) then
			setR(dest,0);
			SignalException(InvalidOperation);
		else
			let condition = D[src1] <= D[src2];
			if condition then
				setR(dest,1);
			else 
				setR(dest,0);
			endif;  
		endif;
	}

op flt_d(src2: freg_t, src1: freg_t, dest: reg_t)
	syntax = format("flt.d %s, %s, %s", dest, src1, src2)
	image = format("1010001 %s %s 001 %s 1010011", src2, src1, dest)
	action = {	
		//An invalid operation exception is raised if either input is NaN
		if((D[src1]<62..52>==0b11111111111 && D[src1]<51..0>!=0) || (D[src2]<62..52>==0b11111111111 && D[src2]<51..0>!=0)) then
			setR(dest,0);
			SignalException(InvalidOperation);
		else
			let condition = D[src1] < D[src2];
			if condition then
				setR(dest,1);
			else 
				setR(dest,0);
			endif;  
		endif;
	}
	
op feq_d(src2: freg_t, src1: freg_t, dest: reg_t)
	syntax = format("feq.d %s, %s, %s", dest, src1, src2)
	image = format("1010001 %s %s 010 %s 1010011", src2, src1, dest)
	action = {	
		//Only signaling NaN inputs cause an invalid operation exception
		if(D[src1]<62..0>==0b111111111110000000000000000000000000000000000000000000000000001 || D[src2]<62..0>==0b111111111110000000000000000000000000000000000000000000000000001) then
			setR(dest,0);
			SignalException(InvalidOperation);
		else
			let condition = D[src1] == D[src2];
			if condition then
				setR(dest,1);
			else
				setR(dest,0);
			endif;
		endif;
	}

// 9.7 Double-Precision Floating-Point Classify Instruction 
// --------------------------------------------------------
//	bit sign	    exponent	          mantissa
// (D[src]<63..63>   &&   D[src]<62..52>   &&   D[src]<51..0>)
op fclass_d(src: freg_t, dest: reg_t)
	syntax = format("fclass.d %s, %s", dest, src)
	image = format("1110001 00000 %s 001 %s 1010011", src, dest)
	action = {	
		setR(dest,0);
		//NegInfinity, bit 0
		if(D[src]<63..52>==0b111111111111 && D[src]<51..0>==0) then
			setR(dest,1);
		endif;
		//NegNormal, bit 1
		if(D[src]<63..63>==1 && D[src]<62..52>!=0 && D[src]<62..52> < 0b11111111111) then
			setR(dest,1<<1);
		endif;
		//NegSubnormal, bit 2
		if(D[src]<63..52>==0b100000000000 && D[src]<51..0>!=0) then
			setR(dest,1<<2);
		endif;
		//NegZero, bit 3
		if(D[src]<63..0>==0b1000000000000000000000000000000000000000000000000000000000000000) then
			setR(dest,1<<3);
		endif;
		//PosZero, bit 4
		if(D[src]<63..0>==0) then 
			setR(dest,1<<4);
		endif;
		//PosSubnormal, bit 5
		if(D[src]<63..52>==0 && D[src]<51..0>!=0) then
			setR(dest,1<<5);
		endif;
		//PosNormal, bit 6
		if(D[src]<63..63>==0 && D[src]<62..52> > 0 && D[src]<62..52> < 0b11111111111) then
			setR(dest,1<<6);
		endif;
		//PosInfinity, bit 7
		if(D[src]<63..52>==0b011111111111 && D[src]<51..0>==0) then
			setR(dest,1<<7);
		endif;
		//SignalingNan, bit 8
		if(D[src]<62..0>==0b111111111110000000000000000000000000000000000000000000000000001) then
			setR(dest,1<<8);
		endif;
		//QuietNan, bit 9
		if(D[src]<62..0>==0b111111111111000000000000000000000000000000000000000000000000001) then
			setR(dest,1<<9);
		endif;
		
	}


