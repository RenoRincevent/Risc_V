/*
 *	RISC-V Instruction Set
 *    RV64I
 *
 *	This file is part of GLISS
 *	Copyright (c) 2017, IRIT UPS.
 *
 *	GLISS is free software; you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation; either version 2 of the License, or
 *	(at your option) any later version.
 *
 *	GLISS is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	You should have received a copy of the GNU General Public License
 *	along with GLISS; if not, write to the Free Software
 *	Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */


op rv64i =
	  addiw
	| slliw
	| srliw
	| sraiw
	| addw
	| subw
	| sllw
	| srlw
	| sraw
	

op addiw(imm: int(12), src: reg_t, dest: reg_t)
	syntax = format("addiw %s, %s, %l", dest, src, imm)
	image = format("%12b %s 000 %s 0011011", imm, src, dest)
	action = {
		setR(dest, coerce(word,(R[src]+imm)<31..0>));
	}

//slliw, srliw and sraiw generate an illegal instruction exception if shamt<5..5> != 0.
op slliw(shamt: card(5), src: reg_t, dest: reg_t)
	syntax = format("slliw %s, %s, %l", dest, src, shamt)
	image = format("0000000 %5b %s 001 %s 0011011", shamt, src, dest)
	action = {
		if shamt<5..5> != 0 then
			SignalException(IllegalInstruction);
		else
			setR(dest, coerce(word,(R[src] << shamt)<31..0>) );
		endif;
	}

op srliw(shamt: card(5), src: reg_t, dest: reg_t)
	syntax = format("srliw %s, %s, %l", dest, src, shamt)
	image = format("0000000 %5b %s 101 %s 0011011", shamt, src, dest)
	action = {
		if shamt<5..5> != 0 then
			SignalException(IllegalInstruction);
		else
			setR(dest, coerce(word, coerce(card(32), R[src]) >> shamt) );
		endif;
	}

op sraiw(shamt: card(5), src: reg_t, dest: reg_t)
	syntax = format("sraiw %s, %s, %l", dest, src, shamt)
	image = format("0100000 %5b %s 101 %s 0011011", shamt, src, dest)
	action = {
		if shamt<5..5> != 0 then
			SignalException(IllegalInstruction);
		else
			setR(dest, coerce(word, coerce(int(32), R[src]) >> shamt) );
		endif;
	}

op addw(src2: reg_t, src1: reg_t, dest: reg_t)
	syntax = format("sllw %s, %s, %s", dest, src1, src2)
	image = format("0000000 %s %s 000 %s 0111011", src2, src1, dest)
	action = {
		setR(dest, coerce(word,((R[src1]+R[src2])<31..0>)));
	}

op subw(src2: reg_t, src1: reg_t, dest: reg_t)
	syntax = format("sllw %s, %s, %s", dest, src1, src2)
	image = format("0100000 %s %s 000 %s 0111011", src2, src1, dest)
	action = {
		setR(dest, coerce(word,((R[src1]-R[src2])<31..0>)));
	}

op sllw(src2: reg_t, src1: reg_t, dest: reg_t)
	syntax = format("sllw %s, %s, %s", dest, src1, src2)
	image = format("0000000 %s %s 001 %s 0111011", src2, src1, dest)
	action = {
		let s = src2<4..0>;
		let temp = (R[src1] << s)<31..0>;
		setR(dest,coerce(word,temp));
	}

op srlw(src2: reg_t, src1: reg_t, dest: reg_t)
	syntax = format("srlw %s, %s, %s", dest, src1, src2)
	image = format("0000000 %s %s 101 %s 0111011", src2, src1, dest)
	action = {
		let s = src2<4..0>;
		let temp = coerce(card(32), R[src1]<31..0>) >> s;
		setR(dest,coerce(word,temp));
	}

op sraw(src2: reg_t, src1: reg_t, dest: reg_t)
	syntax = format("sraw %s, %s, %s", dest, src1, src2)
	image = format("0100000 %s %s 101 %s 0111011", src2, src1, dest)
	action = {
		let s = src2<4..0>;
		let temp = coerce(int(32), R[src1]<31..0>) >> s;
		setR(dest,coerce(word,temp));
	}
