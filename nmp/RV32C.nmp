/*
 *	RISC-V Instruction Set
 *
 *	This file is part of GLISS
 *	Copyright (c) 2019, IRIT UPS.
 *
 *	GLISS is free software; you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation; either version 2 of the License, or
 *	(at your option) any later version.
 *
 *	GLISS is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	You should have received a copy of the GNU General Public License
 *	along with GLISS; if not, write to the Free Software
 *	Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

// Compressed Operations
op rv32c =
	  c_lw
	| c_lwsp
	| c_flw
	| c_flwsp
	| c_fld
	| c_fldsp
	| c_sw
	| c_swsp
	| c_fsw
	| c_fswsp
	| c_fsd
	| c_fsdsp
	| c_slli
	| c_srai
	| c_srli
	| c_beqz
	| c_bnez
	| c_j
	| c_jr
	| c_add
	| c_addi
	| c_addi16sp
	| c_addi4spn
	| c_sub
	| c_and
	| c_andi
	| c_or
	| c_xor
	| c_mv
	| c_li
	| c_lui
	| c_jal
	| c_jalr
	| c_ebreak

// load and store
op c_lw(offset: card(5), base: reg_c_t, dest: reg_c_t)
	syntax = format("c.lw %s, %d(%s)", dest, offset, base)
	image = format("010 %3b %3b %2b %3b 00", offset<3..1>, base, offset<0..0>::offset<4..4>,dest)
	action = {
		let vAddr = R[base+8] + coerce(uword,offset::0b00);
		setR(dest+8, coerce(word,M32[vAddr]));
	}

//C.LWSP invalid when dest == x0
op c_lwsp(offset: card(6), dest: enum(1..31))
	syntax = format("c.lwsp %d, %d(sp)", dest, offset)
	image = format("010 %1b %5b %5b 10", offset<3..3>, dest, offset<2..0>::offset<5..4>)
	action = {
		let vAddr = R[2] + coerce(uword,offset::0b00);
		setR(dest, coerce(word,M32[vAddr]));
	}

op c_flw(offset: card(5), base: reg_c_t, dest: freg_c_t)
	syntax = format("c.flw %s, %d(%s)", dest, offset, base)
	image = format("011 %3b %3b %2b %3b 00", offset<3..1>, base, offset<0..0>::offset<4..4>,dest)
	action = {
		let vAddr = R[base+8] + coerce(uword,offset::0b00);
		F[dest+8] = 0xffffffff::M32F[vAddr]<31..0>;
	}

op c_flwsp(offset: card(6), dest: freg_t)
	syntax = format("c.flwsp %s, %d(sp)", dest, offset)
	image = format("011 %1b %5b %5b 10", offset<3..3>, dest, offset<2..0>::offset<5..4>)
	action = {
		let vAddr = R[2] + coerce(uword,offset::0b00);
		F[dest] = 0xffffffff::M32F[vAddr]<31..0>;
	}

op c_fld(offset: card(5), base: reg_c_t, dest: freg_c_t)
	syntax = format("c.fld %s, %d(%s)", dest, offset, base)
	image = format("001 %3b %3b %2b %3b 00", offset<2..0>, base, offset<4..3>,dest)
	action = {
		let vAddr = R[base+8] + coerce(uword,offset::0b000);
		let memword = M32F[vAddr];
		F[dest+8] = memword ;
	}

op c_fldsp(offset: card(6), dest: freg_t)
	syntax = format("c.fldsp %s, %d(sp)", dest, offset)
	image = format("001 %1b %5b %5b 10", offset<3..3>, dest, offset<2..0>::offset<5..4>)
	action = {
		let vAddr = R[2] + coerce(uword,offset::0b00);
		F[dest] = M32F[vAddr];
	}

op c_sw(offset: card(5), src1: reg_c_t, src2: reg_c_t)
	syntax = format("c.sw %s, %d(%s)", src2, offset, src1)
	image = format("110 %3b %3b %2b %3b 00", offset<3..1>, src1, offset<0..0>::offset<4..4>,src2)
	action = {
		let vAddr = R[8+src1] + coerce(uword,offset::0b00);
		let data = R[8+src2];
		M32[vAddr] = data;
	}

op c_swsp(offset: card(6), src2: reg_t)
	syntax = format("c.swsp %s, %d(sp)", src2, offset)
	image = format("110 %6b %5b 10", offset<3..0>::offset<5..4>, src2)
	action = {
		let vAddr = R[2] + coerce(uword,offset::0b00);
		let data = R[src2];
		M32[vAddr] = data;
	}

op c_fsw(offset: card(5), src1: reg_c_t, src2: reg_c_t)
	syntax = format("c.fsw %s, %d(%s)", src2, offset, src1)
	image = format("111 %3b %3b %2b %3b 00", offset<3..1>, src1, offset<0..0>::offset<4..4>,src2)
	action = {
		let vAddr = R[8+src1] + coerce(uword,offset::0b00);
		let data : float(23,9) = F[8+src2]<31..0>;
		M32HF[vAddr] = data;
	}

op c_fswsp(offset: card(6), src2: freg_t)
	syntax = format("c.fswsp %s, %d(sp)", src2, offset)
	image = format("111 %6b %5b 10", offset<3..0>::offset<5..4>, src2)
	action = {
		let vAddr = R[2] + coerce(uword,offset::0b00);
		let data : float(23,9) = F[src2]<31..0>;
		M32HF[vAddr] = data;
	}

op c_fsd(offset: card(5), src1: reg_c_t, src2: freg_c_t)
	syntax = format("c.fsd %s, %d(%s)", src2, offset, src1)
	image = format("101 %3b %3b %2b %3b 00", offset<2..0>, src1, offset<4..3>,src2)
	action = {
		let vAddr = R[8+src1] + coerce(uword,offset::0b000);
		let data = F[8+src2];
		M32F[vAddr] = data;
	}

op c_fsdsp(offset: card(6), src2: freg_t)
	syntax = format("c.fsdsp %s, %d(sp)", src2, offset)
	image = format("101 %6b %5b 10", offset<2..0>::offset<5..3>, src2)
	action = {
		let vAddr = R[2] + coerce(uword,offset::0b000);
		let data = F[src2];
		M32F[vAddr] = data;
	}

op c_slli(offset: card(6), dest: reg_t)
	syntax = format("c.slli %s, %d",dest,offset)
	image = format("000 %1b %5b %5b 10", offset<5..5>,dest,offset<4..0>)
	action = {
		setR(dest,R[dest] << offset);
	}

op c_srai(offset: card(6), dest: reg_c_t)
	syntax = format("c.srai %s, %d",dest,offset)
	image = format("100 %1b 01 %3b %5b 01", offset<5..5>,dest,offset<4..0>)
	action = {
		setR(8+dest, coerce(word, R[8+dest]) >> offset);
	}

op c_srli(offset: card(6), dest: reg_c_t)
	syntax = format("c.srli %s, %d",dest,offset)
	image = format("100 %1b 00 %3b %5b 01", offset<5..5>,dest,offset<4..0>)
	action = {
		setR(8+dest, coerce(uword, R[8+dest]) >> offset);
	}

op c_beqz(offset: int(8), src1: reg_c_t)
	tgt_offset = coerce(int(10), offset :: 0b00<1..0>)
	syntax = format("c.beqz %s, %d",src1,offset)
	image = format("110 %3b %3b %5b 01", offset<7..7>::offset<3..2>,src1,offset<6..5>::offset<1..0>::offset<4..4>)
	action = {
		let condition = R[8+src1] == 0;
		if condition then
			NPC = PC + tgt_offset;
		endif;
	}

op c_bnez(offset: int(8), src1: reg_c_t)
	tgt_offset = coerce(int(10), offset :: 0b00<1..0>)
	syntax = format("c.bnez %s, %d",src1,offset)
	image = format("111 %3b %3b %5b 01", offset<7..7>::offset<3..2>,src1,offset<6..5>::offset<1..0>::offset<4..4>)
	action = {
		let condition = R[8+src1] != 0;
		if condition then
			NPC = PC + tgt_offset;
		endif;
	}

op c_j(offset: int(11))
	syntax = format("c.j %d",offset)
	image = format("101 %11b 01",offset<10..10>::offset<3..3>::offset<8..7>::offset<9..9>::offset<5..5>::offset<6..6>::offset<2..0>::offset<4..4>)
	action = {
		let tgt_offset : int(32) = coerce(word,offset<10..0>::0b0);
		NPC = PC + tgt_offset;
	}

op c_jr(src1: reg_t)
	syntax = format("c.jr %s",src1)
	image = format("100 0 %5b 00000 10",src1)
	action = {
		NPC = R[src1];
	}

op c_add(dest: enum(1..31), src2: enum(1..31))
	syntax = format("c.add %d, %d",dest,src2)
	image = format("100 1 %5b %5b 10",dest,src2)
	action = {
		setR(dest, R[dest] + R[src2]);
	}

op c_addi(dest: reg_t, offset: int(6))
	syntax = if dest == 0 && offset == 0
		then "c.nop"
	else format("c.addi %s, %d",dest,coerce(word,offset<5..0>)) endif
	image = format("000 %1b %5b %5b 01",offset<5..5>,dest,offset<4..0>)
	action = {
		let tgt_offset : int(32) = coerce(word,offset<5..0>);
		setR(dest, R[dest] + tgt_offset);
	}

op c_addi16sp(offset: [1..63])
	syntax = format("c.addi16sp %d",offset)
	image = format("011 %1b 00010 %5b 01",offset<5..5>,offset<0..0>::offset<2..2>::offset<4..3>::offset<1..1>)
	action = {
		let tgt_offset : int(32) = coerce(word,offset<5..0>::0b0000);
		R[2] = R[2] + tgt_offset;
	}

op c_addi4spn(dest: reg_c_t, offset: [1..255])
	syntax = format("c.addi4spn %s %d",dest,offset)
	image = format("000 %8b %3b 00",offset<3..2>::offset<7..4>::offset<0..0>::offset<1..1>,dest)
	action = {
		let tgt_offset : card(32) = 0b0::offset<7..0>::0b00;
		setR(8+dest, R[2] + tgt_offset);
	}

op c_sub(dest: reg_c_t, src2: reg_c_t)
	syntax = format("c.sub %s, %s",dest,src2)
	image = format("100011 %3b 00 %3b 01",dest,src2)
	action = {
		setR(8+dest,R[8+dest] - R[8+src2]);
	}

op c_and(dest: reg_c_t, src2: reg_c_t)
	syntax = format("c.and %s, %s",dest,src2)
	image = format("100011 %3b 11 %3b 01",dest,src2)
	action = {
		setR(8+dest, R[8+dest] & R[8+src2]);
	}

op c_andi(dest: reg_c_t, offset: int(6))
	syntax = format("c.andi %s, %d",dest,coerce(word,offset<5..0>))
	image = format("100 %1b 10 %3b %5b 01",offset<5..5>,dest,offset<4..0>)
	action = {
		setR(8+dest, R[8+dest] & coerce(word,offset<5..0>));
	}

op c_or(dest: reg_c_t, src2: reg_c_t)
	syntax = format("c.or %s, %s",dest,src2)
	image = format("100011 %3b 10 %3b 01",dest,src2)
	action = {
		setR(8+dest, R[8+dest] | R[8+src2]);
	}

op c_xor(dest: reg_c_t, src2: reg_c_t)
	syntax = format("c.xor %s, %s",dest,src2)
	image = format("100011 %3b 01 %3b 01",dest,src2)
	action = {
		setR(8+dest, R[8+dest] ^ R[8+src2]);
	}

op c_mv(dest: reg_t, src2: enum(1..31))
	syntax = format("c.mv %s, %d",dest,src2)
	image = format("100 0 %5b %5b 10",dest,src2)
	action = {
		setR(dest,R[src2]);
	}

op c_li(dest: reg_t, offset: int(6))
	syntax = format("c.li %s, %d",dest,coerce(word,offset<5..0>))
	image = format("010 %1b %5b %5b 01",offset<5..5>,dest,offset<4..0>)
	action = {
		let tgt_offset : int(32) = coerce(word,offset<5..0>);
		setR(dest,tgt_offset);
	}

//C.LUI Invalid when rd==x2 or imm==0
op c_lui(dest: enum(0..1,3..31), offset: int(6))
	syntax = format("c.lui %d, %d",dest,offset)
	image = format("011 %1b %5b %5b 01",offset<5..5>,dest,offset<4..0>)
	action = {
		let tgt_offset : int(20) = coerce(word,offset::0b000000000000);
		setR(dest, tgt_offset);
	}

op c_jal(offset: int(11))
	syntax = format("c.jal %d",offset)
	image = format("001 %11b 01",offset<10..10>::offset<3..3>::offset<8..7>::offset<9..9>::offset<5..5>::offset<6..6>::offset<2..0>::offset<4..4>)
	action = {
		let tgt_offset : int(32) = coerce(word,offset<5..0>::0b00);
		R[1] = PC + 2;
		NPC = PC + tgt_offset;
	}

//C.JALR Invalid when src1==x0
op c_jalr(src1: enum(1..31))
	syntax = format("c.jalr %d",src1)
	image = format("100 1 %5b 00000 10",src1)
	action = {
		let t = PC + 2;
		NPC = R[src1];
		R[1] = t;
	}

op c_ebreak()
	syntax = "c.ebreak"
	image = "100 1 00000 00000 10"
	action = {
		SignalException(BreakPoint);
	}
