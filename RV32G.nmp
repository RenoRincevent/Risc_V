/*
 *	RISC-V Instruction Set
 *
 *	This file is part of GLISS
 *	Copyright (c) 2017, IRIT UPS.
 *
 *	GLISS is free software; you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation; either version 2 of the License, or
 *	(at your option) any later version.
 *
 *	GLISS is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	You should have received a copy of the GNU General Public License
 *	along with GLISS; if not, write to the Free Software
 *	Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

 // types
type bit       = card( 1)
type ubyte     = card( 8)
type uhalf     = card(16)
type uword     = card(32)
type duword    = card(64)
type byte      = int ( 8)
type half      = int (16)
type word      = int (32)
type dword     = int (64)
type address   = card(32)
type index     = card( 5)
type real      = float(23,9)
type doublef   = float(52,12)
type indexCSR	= card(12)

include "nmp/config.nmp"
include "nmp/state.nmp"
include "nmp/macros.nmp"

// GLISS configuration
let proc = "RV32G"
let bit_order = "uppermost"
let gliss_isize = "32,16"

// modes
mode reg_t (r: index) = r
	num = r
	syntax =
		switch ( r ) {
		case  0:	"zero" //00000
		case  1:	"ra"	//00001
		case  2: 	"sp"	//00010
		case  3: 	"gp"	//00011
		case  4: 	"tp"	//00100
		case  5: 	"t0"	//00101
		case  6: 	"t1"	//00110
		case  7: 	"t2"	//00111
		case  8:	"fp"	//01000
		case  9:	"s1"	//01001
		case 10:	"a0"	//01010
		case 11:	"a1"	//01011
		case 12:	"a2"	//01100
		case 13:	"a3"	//01101
		case 14:	"a4"	//01110
		case 15:	"a5"	//01111
		case 16:	"a6"
		case 17:	"a7"
		case 18:	"s2"
		case 19:	"s3"
		case 20:	"s4"
		case 21:	"s5"
		case 22:	"s6"
		case 23:	"s7"
		case 24:	"s8"
		case 25:	"s9"
		case 26:	"s10"
		case 27:	"s11"
		case 28:	"t3"
		case 29:	"t4"
		case 30:	"t5"
		case 31:	"t6"
		}
	image  = format ( "%5b", r )
macro setR(d, v) = if d != 0 then R[d] = v; endif

mode reg_c_t (rc: card(3)) = rc
	num = rc
	syntax =
		switch ( rc ) {
		case  0:	"fp"	//000
		case  1:	"s1"	//001
		case  2:	"a0"	//010
		case  3:	"a1"	//011
		case  4:	"a2"	//100
		case  5:	"a3"	//101
		case  6:	"a4"	//110
		case  7:	"a5"	//111
		}
	image  = format ( "%3b", rc )

mode freg_t (f: index) = f
	num = f
	syntax =
		switch ( f ) {
		case  0:	"ft0"
		case  1:	"ft1"
		case  2: 	"ft2"
		case  3: 	"ft3"
		case  4: 	"ft4"
		case  5: 	"ft5"
		case  6: 	"ft6"
		case  7: 	"ft7"
		case  8:	"fs0"
		case  9:	"fs1"
		case 10:	"fa0"
		case 11:	"fa1"
		case 12:	"fa2"
		case 13:	"fa3"
		case 14:	"fa4"
		case 15:	"fa5"
		case 16:	"fa6"
		case 17:	"fa7"
		case 18:	"fs2"
		case 19:	"fs3"
		case 20:	"fs4"
		case 21:	"fs5"
		case 22:	"fs6"
		case 23:	"fs7"
		case 24:	"fs8"
		case 25:	"fs9"
		case 26:	"fs10"
		case 27:	"fs11"
		case 28:	"ft8"
		case 29:	"ft9"
		case 30:	"ft10"
		case 31:	"ft11"
		}
	image  = format ( "%5b", f )
macro setF(d, v) = F[d] = v;


mode freg_c_t (fc: card(3)) = fc
	num = fc
	syntax =
		switch ( fc ) {
		case  0:	"fs0"
		case  1:	"fs1"
		case  2:	"fa0"
		case  3:	"fa1"
		case  4:	"fa2"
		case  5:	"fa3"
		case  6:	"fa4"
		case  7:	"fa5"
		}
	image  = format ( "%3b", fc )
//macro setD(d, v) = D[d] = v;

mode CSRs (i: indexCSR) = i
	num = i
	syntax =
		switch (i) {
		case 0: 	"ustatus"
		case 1: 	"fflags"
		case 2: 	"frm"
		case 3: 	"fcsr"
		case 4: 	"uie"
		case 5: 	"utvec"
		case 64: 	"uscratch"
		case 65:	"uepc"
		case 66: 	"ucause"
		case 67:	"utval"
		case 68:	"uip"
		case 768: 	"mstatus"
		case 833: 	"mepc"
		case 3072:	"cycle"
		case 3073:	"time"
		case 3074:	"instret"
		case 3860:	"mhartid"
		default: 	"unknown"
		}
	image = format ("%12b",i)
macro setCSRS(d, v) = CSRS[d] = v;

//Modifier Gliss pour que le switch accepte autre chose que les int
// mode reg_Exclu_rd2 (j: enum(0..1,3..31))
// 	num = j
// 	syntax =
// 		switch ( j ) {
// 		case  0:	"zero" //00000
// 		case  1:	"ra"	//00001
// 		case  3: 	"gp"	//00011
// 		case  4: 	"tp"	//00100
// 		case  5: 	"t0"	//00101
// 		case  6: 	"t1"	//00110
// 		case  7: 	"t2"	//00111
// 		case  8:	"fp"	//01000
// 		case  9:	"s1"	//01001
// 		case 10:	"a0"	//01010
// 		case 11:	"a1"	//01011
// 		case 12:	"a2"	//01100
// 		case 13:	"a3"	//01101
// 		case 14:	"a4"	//01110
// 		case 15:	"a5"	//01111
// 		case 16:	"a6"
// 		case 17:	"a7"
// 		case 18:	"s2"
// 		case 19:	"s3"
// 		case 20:	"s4"
// 		case 21:	"s5"
// 		case 22:	"s6"
// 		case 23:	"s7"
// 		case 24:	"s8"
// 		case 25:	"s9"
// 		case 26:	"s10"
// 		case 27:	"s11"
// 		case 28:	"t3"
// 		case 29:	"t4"
// 		case 30:	"t5"
// 		case 31:	"t6"
// 		}
// 	image  = format ( "%5b", j )

mode IMM16(n: half) = n
	syntax = format("#%d", n)
	image = format("%16b", n)

mode UIMM16(n: uhalf) = n
   syntax = format ( "#%d", n )
   image  = format ( "%16b", n )

op multi = instruction_G | instruction_C

// top-level instructions
op instruction_G (x: allinstr)
	syntax = x.syntax
	image = x.image
	action = {
		NPC = PC + 4;
		x.action;
		PC = NPC;
	}
	instruction_set_select = M32[PC]<1..0> == 0b11 && M32[PC]<4..2> != 0b111
	instruction_set_name = "instruction_G"

op instruction_C (x: allrv32c)
	syntax = x.syntax
	image = x.image
	action = {
		NPC = PC + 2;
		x.action;
		PC = NPC;
	}
	instruction_set_select = M16[PC]<1..0> != 0b11
	instruction_set_name = "instruction_C"

op allinstr =
	  all_rrr
	| all_rri
	| all_alu
	| all_branch
	| all_special
	| rv32m 	// muldiv 32 bits
	| all_loads_32
	| all_stores_32
	| rv32a // atomic operations 32 bits
	| rv32f // single floating point 32 bits
	| rv32d // double floating point
	| all_privileged

op allrv32c =
	rv32c

op init ()
	action = {
		notReserve();
		R[0] = 0;
	}


include "nmp/RV32I_alu.nmp"
include "nmp/RV32I_mem.nmp"
include "nmp/RV32A.nmp"
include "nmp/RV32M.nmp"
include "nmp/control.nmp"
include "nmp/special.nmp"
include "nmp/RV32F.nmp"
include "nmp/RV32D.nmp"
include "nmp/RV32C.nmp"
include "nmp/privileged.nmp"
